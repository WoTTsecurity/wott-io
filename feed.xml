<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://wott.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wott.io/" rel="alternate" type="text/html" /><updated>2019-11-19T16:32:32+00:00</updated><id>https://wott.io/feed.xml</id><title type="html">Web of Trusted Things</title><subtitle>Seamless security audit of Linux systems for DevOps teams.</subtitle><entry><title type="html">How to Do a CVE Scan of Your Linux System</title><link href="https://wott.io/blog/tutorials/2019/11/04/cve" rel="alternate" type="text/html" title="How to Do a CVE Scan of Your Linux System" /><published>2019-11-04T14:00:00+00:00</published><updated>2019-11-04T14:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/11/04/cve</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/11/04/cve">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Common Vulnerabilities and Exposures (&lt;a href=&quot;https://cve.mitre.org/cve/&quot;&gt;CVE&lt;/a&gt;) is a list of publicly known cybersecurity vulnerabilities. Each vulnerability is given a unique CVE number by which it can be identified and referenced. The list can be easily accessed for free online, but wouldn’t it be nice to be automatically notified when you are affected by a newly reported vulnerability without having to check the list every day?&lt;/p&gt;

&lt;p&gt;WoTT can help you do this by scanning your system packages and checking them against the CVE list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: None/Beginner&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Complete&lt;/strong&gt;: 15 - 45 minutes (depending on whether you are already set up with WoTT)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have the WoTT agent installed (or &lt;a href=&quot;#wott&quot;&gt;install it&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Have a profile with WoTT (instructions included in set up)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a few simple steps, you can determine your vulnerability score. Follow the instructions below.&lt;/p&gt;

&lt;h2 id=&quot;-1-install-the-wott-agent&quot;&gt;&lt;a name=&quot;wott&quot;&gt;&lt;/a&gt; 1. Install the WoTT agent&lt;/h2&gt;

&lt;p&gt;You’ll need to install our lightweight agent if you haven’t done so already. See our &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;getting started&lt;/a&gt; page and follow the instructions.&lt;/p&gt;

&lt;h2 id=&quot;2-review-cve-scan-results&quot;&gt;2. Review CVE scan results&lt;/h2&gt;

&lt;p&gt;If you’re already set up with WoTT, you’ll need to navigate and log in to the &lt;a href=&quot;https://dash.wott.io&quot;&gt;WoTT Dash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now click on the ‘Device Name’ to see device details. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;sample dashboard&quot; src=&quot;https://wott.io/assets/blog/al-dash-977c4403c36d5606d3f46c66890c09343962906def456281e30ac838810761ed.png&quot; integrity=&quot;sha256-l3xEA8NtVgbT9GxmiQwJNDlikG3vRWKB4wrIOIEHYe0=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/546b19-d904e78273576ddd5bc24402998d5a1ff2a9c94c05bbda7bee66ff992c59e4cb.png 2x, https://wott.io/assets/cb07c6-98201e0ccb377b9f43a067c2866d41364388eeb6ae033801a82e79e1f800c770.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see your vulnerabilities, navigate to the security tab at the top of the page where a scan of your device will be performed.
Here you will see a list of all CVEs that affect your endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;sample CVE &quot; src=&quot;https://wott.io/assets/blog/al-device-b5c9d079c5c54a98b1184384be1d3e33638df525edc15a019717fd93bdf939f8.png&quot; integrity=&quot;sha256-tcnQecXFSpixGEOEvh0+M2ON9SXtwVoBlxf9k735Ofg=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/b3ea79-a18055521ecfd73d4702c5b8ab4eb8bd961c2af44e0fa8c71daca1a355d9328b.png 2x, https://wott.io/assets/e84a38-680bff384adf8ba302f4f505e70b1788a499a350ef965fdbf32a36fbc224c3c0.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this particular example, you can see that the scan has detected default login credentials (such as those on a raspberry pi). The results will of course vary depending on your device, but this should give you a better understanding on the common vulnerabilities present on your device that can be easily exploited.&lt;/p&gt;

&lt;h2 id=&quot;additional-information-and-closing-notes&quot;&gt;Additional Information and Closing Notes&lt;/h2&gt;

&lt;p&gt;WoTT also provides a more holistic security audit and set of developers tools to capture and correct other common failure points such as &lt;a href=&quot;https://wott.io/documentation/faq#firewall-policy&quot;&gt;firewall policy&lt;/a&gt;, OpenSSH audits and the presence of app hardening tools like &lt;a href=&quot;https://wott.io/documentation/faq#apparmor&quot;&gt;AppArmor&lt;/a&gt; and &lt;a href=&quot;https://wott.io/documentation/faq#selinux&quot;&gt;SELinux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To understand each check in the security audit visit the WoTT &lt;a href=&quot;https://wott.io/documentation/faq&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;</content><author><name>Al Esmail</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Introduction</summary></entry><entry><title type="html">How to Audit OpenSSH Configuration and Secure It</title><link href="https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security" rel="alternate" type="text/html" title="How to Audit OpenSSH Configuration and Secure It" /><published>2019-10-25T17:00:00+00:00</published><updated>2019-10-25T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Beginner to Medium&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading Time&lt;/strong&gt;: 15-20 Minutes&lt;/p&gt;

&lt;p&gt;In this post, we will review the fundamentals of a secure OpenSSH server. As you probably know the SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure however if used with the default settings, can be vulnerable to attacks from unwanted parties.&lt;/p&gt;

&lt;p&gt;We will look at the basics of auditing and securing your OpenSSH configuration file, to make sure that only trusted users can remote login to your server, and are privy to the information they are permitted to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Linux distribution (this guide should be good for most distro’s)&lt;/li&gt;
  &lt;li&gt;The config file (usually located at /etc/ssh/ssh_config)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can open this file from the terminal using the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo $EDITOR /etc/ssh/ssh_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;We also want to quickly mention that our service &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; audits the security of your linux machine/s including your OpenSSH configuration. It is free for up to 5 nodes and contains many guides and documentation to make sure setting up is simple and painless whilst easing your mind on the strenuous work that is securing your system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are a few key features to check if your OpenSSH server is secure:&lt;/p&gt;

&lt;h2 id=&quot;1-use-strong-passwords&quot;&gt;1. Use Strong Passwords&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/password_strength.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This might seem like an obvious one, but a lot of systems are vulnerable to brute force attacks or simple guesswork due to having easy to guess passwords or generic passwords. By ensuring that your password/s is complex and long, it makes it a lot more difficult and more time consuming to brute force (can result in you noticing the attack) if the password has capital letters, special characters and numbers. Also make sure to use a non-conspicuous word or phrase as your base. Something like idontlikemeltedicecream rather than your first car or the name of your pet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: we strongly recommend you don’t use passwords to begin with (see point 5). But we understand that some people would like to keep using passwords so we’ll keep this up here.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-change-the-default-ssh-port&quot;&gt;2. Change the Default SSH Port&lt;/h2&gt;

&lt;p&gt;By default, any SSH port is 22. This makes it so that anyone connecting to your SSH server can find it simply by connecting to the default port. Changing the port makes it more difficult to find and slows down the attacker’s process significantly. To change it, navigate to the config file as shown above and open it in your terminal (you can also edit it through a text editor although this guide will show you how to do so in a terminal).&lt;/p&gt;

&lt;p&gt;Once you have the config file open, locate the line that says Port 22, and change the number to a port that is not in use on your server yet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can check to see which ports are not in use by running the following command on another terminal:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ netstat -ntap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;This command will show you a long list of ports and connections that are open.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-use-protocol-2&quot;&gt;3. Use Protocol 2&lt;/h2&gt;

&lt;p&gt;Again this is a simple one but can be overlooked. There are two protocol versions SSH uses, by default it should be set to 2, but be sure to check that version 2 is being used. For more information on why protocol 2 should be used instead of 1, &lt;a href=&quot;http://www.snailbook.com/faq/ssh-1-vs-2.auto.html&quot;&gt;please refer to this webpage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-disable-root-login&quot;&gt;4. Disable Root Login&lt;/h2&gt;

&lt;p&gt;This one is interesting because it is a use-by-case recommendation. We highly recommend disabiling root login, because a common attack is to brute force against the name of the root superuser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please Note&lt;/strong&gt;: If you do plan on disabling Root Login, please test the SSH login with your non-root user that you plan to use for SSH logins &lt;strong&gt;before&lt;/strong&gt; you disable the root account. If you don’t, you may be stuck without a way to access your server through SSH.&lt;/p&gt;

&lt;p&gt;To disable root login, navigate to the config file, locate the “PermitRootLogin” and change that to “no”. This will make it so that you cannot login with the root user anymore.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-use-key-based-authentication&quot;&gt;5. Use Key-based Authentication&lt;/h2&gt;

&lt;p&gt;Key-based Authentication (aka Public key authentication), are a much more secure way of authenticating users as they are much less prone to brute force attacks. To enable key-based authentication, you must disable password authentication, this will leave your users with no choice but to use keys.&lt;/p&gt;

&lt;p&gt;Look for these settings and apply the following changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PubkeyAuthentication yes
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information on key-based authentication and a more detailed guide on setting up keys, please refer to &lt;a href=&quot;https://linux-audit.com/using-ssh-keys-instead-of-passwords/&quot;&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;h2 id=&quot;6-check-integrity-of-user-database&quot;&gt;6. Check Integrity of User Database&lt;/h2&gt;

&lt;p&gt;You’ve probably added users to the config file to allow trusted people to access your server. Make sure that there are no old users that have access to your server if they shouldn’t. Again, maybe a bit obvious but can be overlooked.&lt;/p&gt;

&lt;h2 id=&quot;7-disable-agent-agentforwarding&quot;&gt;7. Disable Agent AgentForwarding&lt;/h2&gt;

&lt;p&gt;This is another example of something that is a use-by-case scenario. Since it allows connections outside of your server whilst leaving a socket open on the local machine, anyone with sufficient permissions can connect to and use your local ssh-agent. Unless you’re using something like a jump/bastion server, it is unlikely that you need this. For more information, please refer to this article &lt;a href=&quot;https://heipei.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To disable agent AgentForwarding, navigate to the following setting in the config file and apply the changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowAgentForwarding no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8-use-of-a-bastion-host&quot;&gt;8. Use of a Bastion Host&lt;/h2&gt;

&lt;p&gt;A bastion host is a special purpose computer on a network with the purpose of withstanding attacks. They usually host a single application (for example a proxy server) and all other services are removed or limited to reduce the threats on the network through the computer. This means that you can disable public SSH access to all other nodes, and you would have to go through the bastion host to access any other node.&lt;/p&gt;

&lt;p&gt;Having a bastion host can act as perimeter to reduce the attack surface of your network. To set one up, we recommend going through &lt;a href=&quot;https://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/&quot;&gt;this extensive guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;9-limit-users-logging-in-over-ssh&quot;&gt;9. Limit Users Logging in over SSH&lt;/h2&gt;

&lt;p&gt;Limiting which users can login over SSH can save you from worrying who’s able to login and who isn’t. This point is bouncing off of point 6. To allow certain users, we will assume you want only users “Gecko” and “Marko” to login over SSH. Navigate to the SSH config file and add the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowUsers Gecko Marko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many other ways you can secure your OpenSSH configuration, we have outlined the glaring flaws that quite a few developers and admins overlook. We do recommend reading through the config file and checking what can be changed thoroughly as even the small mistakes can result in an attack on your server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; is a developer tool to automatically run CVE scans, audit service configurations, manage your firewalls, simplify mTLS, and more. By using this tool to scan your OpenSSH config, you can cut through the hassle of looking for similar guides online or reading through your config files to make sure everything is as secure as it can be.&lt;/p&gt;</content><author><name>Mahmoud Fahmy</name></author><category term="tutorials" /><category term="tutorials" /><summary type="html">Introduction</summary></entry><entry><title type="html">What is SELinux and Why You Might Want It</title><link href="https://wott.io/blog/tutorials/2019/10/15/what-is-selinux" rel="alternate" type="text/html" title="What is SELinux and Why You Might Want It" /><published>2019-10-15T17:00:00+00:00</published><updated>2019-10-15T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/10/15/what-is-selinux</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/10/15/what-is-selinux">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today we’re going to talk about SELinux - Security Enhanced Linux. For the everyday layman SELinux maybe daunting to setup, but is a good introduction into different ways to manage access control to your systems. More and more we give companies our precious data and the onus should be placed on developers to protect this data with growing cybersecurity threats. So we’re going to show you how to implement SELinux for the security-conscious developer (and talk a little on AppArmor).&lt;/p&gt;

&lt;p&gt;Proceed with caution though - SELinux and AppArmor are MAC protocols (more on that later) and you run the risk of locking yourself out of your own system. If you’re interested in learning a bit more about SELinux and MAC protocols, read on below. If you just want to jump straight into the bare-bones edition, skip straight ahead to the &lt;a href=&quot;#tutorial&quot;&gt;tutorial&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Medium&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Complete&lt;/strong&gt;: 30 minutes - 1 hour&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Either:
    &lt;ul&gt;
      &lt;li&gt;have SELinux installed&lt;/li&gt;
      &lt;li&gt;use a Red Hat distribution of Linux&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;follow guide to install SELinux for Debian based Linux (Debian, Ubuntu, etc) using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; package&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;have a virtual machine with your Linux distribution installed&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;an understanding on MAC protocols (will make the tutorial easier) we give a brief introduction if you are not familiar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But &lt;em&gt;please&lt;/em&gt; test this out first on a VM to get familiar with MAC protocols as we do not want you locked out of your system.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-selinux-and-what-is-a-mac-model&quot;&gt;So what is SELinux and what is a MAC Model?&lt;/h2&gt;

&lt;p&gt;SELinux is a US National Security Agency project aimed at improving security in the Linux kernel (more specifically, kernel 2.6.x). You will already be familiar with Discretionary Access Control as it is the system employed by most consumer Operating Systems. File permissions are determined by the creator/user, in Linux this is the ‘Access Control List’ - think about times where you have used &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to assign read or write permissions.&lt;/p&gt;

&lt;p&gt;Mandatory Access Control, or MAC (not to be confused with Media Access Control) is different. Basically, the &lt;em&gt;operating system&lt;/em&gt; determines access based on a security label (rules for access can be managed by a security officer- usually a single system administrator), not the user that created the file. For Linux, this system exists as SELinux.&lt;/p&gt;

&lt;p&gt;The control is taken away from the user?! Why on Earth would you want that?! Many organisations deal with sensitive data like military or government. Within a military organisation, some information is reserved for specific individuals with associated security labels (need to know, top secret, etc;).&lt;/p&gt;

&lt;p&gt;But beyond that, we tend to entrust our data to many corporations which we don’t want everyone seeing. As a result, enterprise oriented Linux systems, like RedHat Enterprise Linux (RHEL) automatically have SELinux pre-installed. Familiarising yourself with it is absolutely the way to go.&lt;/p&gt;

&lt;p&gt;Think of it this way: let’s say you work for a hospital; you want to manage records of patients. Typically there are a few trusted individuals who have explicit access to these records (to update them, or manage them), but it is the governing board of regulations or the company itself that dictates how this information is shared. Of course, in a hospital, patient records should be confidential and strictly between patient and doctor. You may want another doctor to access your records, but you wouldn’t want your employer or other hospital admin to.&lt;/p&gt;

&lt;p&gt;In other words, there is a hierarchy that defines who has access to certain resources and information. At an organisation level, this is set by regulations. These regulations dictate MAC access.&lt;/p&gt;

&lt;h2 id=&quot;--setting-up-selinux-for-yourself&quot;&gt;&lt;a name=&quot;tutorial&quot;&gt; &lt;/a&gt; Setting up SELinux for yourself&lt;/h2&gt;

&lt;p&gt;SELinux is milder than most MAC models and a good introduction into implementing MAC for your own security. In SELinux, the system administrator is the security officer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are Linux distributions that have SELinux preinstalled, such as RedHat Enterprise Linux (RHEL) and CentOS.&lt;/p&gt;

&lt;p&gt;It’s useful to have SELinux on your servers as it protects your server from malicious or flawed programs. The ‘strength’ of SELinux is at the discretion of the system administrator. It comes in 3 modes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disabled&lt;/li&gt;
  &lt;li&gt;Permissive&lt;/li&gt;
  &lt;li&gt;Enforcing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permissive prints system warnings but does not enforce the protocol (useful for testing).&lt;/p&gt;

&lt;h2 id=&quot;setting-up-on-ubuntudebian&quot;&gt;Setting Up on Ubuntu/Debian&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Install SELinux&quot; src=&quot;https://wott.io/assets/blog/selinux-install-72f65214b02923c21821d6911cbdf60173e581ee34cb73c2e928f6c96928b149.png&quot; integrity=&quot;sha256-cvZSFLApI8IYIdaRHL32AXPlge40y3PC6Sj2yWkosUk=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/a5153f-48926024ed09e093ba8caed8713f04dc8bbaacb4128bc60bcda71e5355682a43.png 2x, https://wott.io/assets/be60c1-6bcbaf2a657e18aac643aaf218447dc44a2d69486a206340632214b2ed79333c.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On Ubuntu or Debian, you need to install the required packages by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get install selinux-basics selinux-policy-default auditd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re using Ubuntu, download &lt;a href=&quot;https://wiki.debian.org/SELinux/Setup?action=AttachFile&amp;amp;do=view&amp;amp;target=_load_selinux_policy&quot;&gt;this&lt;/a&gt; taken from the Debian Wiki. Copy it into: &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/initramfs-tools/scripts/init-bottom/&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;update-initramfs -u &lt;/code&gt; in your terminal session.&lt;/p&gt;

&lt;p&gt;Once done, you can check SELinux is installed/running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# getenforce
Disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SELinux is installed but not running, you will need to activate and reboot:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# selinux-activate
# reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should put SELinux into Permissive mode. To check, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sestatus&lt;/code&gt; and you should get the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             default
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setting-modes&quot;&gt;Setting Modes&lt;/h2&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# audit2why -al
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will return would-be blocked operations since your last boot. It is tedious but worth going through as SELinux has many reported bugs. We would suggest going through each bug one-by-one and follow &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security-enhanced_linux/sect-security-enhanced_linux-fixing_problems-allowing_access_audit2allow&quot;&gt;this Red Hat guide&lt;/a&gt; for changing access using the &lt;code class=&quot;highlighter-rouge&quot;&gt;audit2allow&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you are not confident, &lt;strong&gt;we strongly suggest testing this on a virtual machine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can now change the mode to enforcing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to test, run: &lt;code class=&quot;highlighter-rouge&quot;&gt;setenforce = 1&lt;/code&gt; in your terminal&lt;/li&gt;
  &lt;li&gt;or if you are confident, add &lt;code class=&quot;highlighter-rouge&quot;&gt;enforcing = 1&lt;/code&gt; to the kernel command line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/default/grub&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then reboot as earlier. You will now be running SELinux’s default policy. To change this, simply manoeuvre back to the root user and set it back to permissive via &lt;code class=&quot;highlighter-rouge&quot;&gt;setenforce = 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Provided you have access to the root user, you can feel free to play around with SELinux’s &lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/changing-selinux-states-and-modes/&quot;&gt;other policies&lt;/a&gt; until you are comfortable.&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing Up&lt;/h2&gt;

&lt;p&gt;And that concludes our intro to SELinux. Play around with policies until you are comfortable, then you can ship SELinux to your own servers with confidence. SELinux essentially acts as a sandbox protecting your information from fradulent or corrupted access by external programs or daemons. As for AppArmor, it’s just another MAC protocol that’s used particularly for Ubuntu. It’s easier to use as it deals with pathing rules; but SELinux is widely considered the more secure of the two. SELinux is better for those who are very familiar with Unix based systems, but AppArmor is another great introduction to MAC.&lt;/p&gt;

&lt;p&gt;SELinux is a great way to implement security, but it is known for its bugs and disruptive mechanisms. Actual sandboxing is another alternative to protecting your kernel.&lt;/p&gt;

&lt;p&gt;Good work getting to the end of this tutorial. You have taken a big step in securing your Linux environment. There are additional steps you can take to improve security posture like CVE scanning, firewall management and service configuration. WoTT can help you do that with a lightweight agent that scans for vulnerabilities and provides clear recommended actions to fix those issues. Get started &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="tutorials" /><summary type="html">Introduction</summary></entry><entry><title type="html">Security audit checklist for linux systems</title><link href="https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems" rel="alternate" type="text/html" title="Security audit checklist for linux systems" /><published>2019-10-04T10:00:00+00:00</published><updated>2019-10-04T10:00:00+00:00</updated><id>https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems</id><content type="html" xml:base="https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems">&lt;p&gt;We so often hear from developers that they don’t need to worry about cyber security because they’re too small to be targeted or because they trust their service providers to take care of it for them. Sound like someone you know? Well, let’s start with a quick synopsis of recent cloud failures that were not targeted attacks and where service providers weren’t a silver bullet.  Each of these examples were simply failures in security hygiene.&lt;/p&gt;

&lt;h2 id=&quot;security-fails&quot;&gt;Security Fails&lt;/h2&gt;

&lt;h3 id=&quot;facebook&quot;&gt;Facebook&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; 2019&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; Cultura Colectiva (a 3rd party user of Facebook data) exposed 500 million customer phone numbers&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; AWS server was configured to be public facing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://www.cbsnews.com/news/millions-facebook-user-records-exposed-amazon-cloud-server/&quot;&gt;CBS News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; Ongoing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; 52,000 databases searchable through &lt;a href=&quot;shodan.io&quot;&gt;Shodan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; If MongoDB is installed with default server settings, it allows anyone to browse, download, edit or delete data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://krebsonsecurity.com/tag/mongodb/&quot;&gt;KrebsOnSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;capital-one&quot;&gt;Capital One&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; 2019&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; 100 million records including bank details and social security&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; Misconfigured web application firewall (WAF) in AWS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://krebsonsecurity.com/tag/capital-one-breach/&quot;&gt;KrebsOnSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;medical-facilities&quot;&gt;Medical facilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; Ongoing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fail:&lt;/strong&gt; 187 servers with x-ray and medical data open to public. &amp;gt;1m records with medical procedures, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; Medical data exposed to the public internet without requiring authentication&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://www.propublica.org/article/millions-of-americans-medical-images-and-data-are-available-on-the-internet&quot;&gt;ProPublica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-security-audit-checklist&quot;&gt;Linux security audit checklist&lt;/h2&gt;

&lt;p&gt;Still think you’re above the fray? Well maybe you are, so the checklist below will just be reassurance that you and your team have already done everything you need to do. Let’s dig in  with this set of 5 security practices that can get you going in the right direction.&lt;/p&gt;

&lt;h3 id=&quot;1-cve-scanner&quot;&gt;1. CVE scanner&lt;/h3&gt;

&lt;p&gt;The CVE databases are great but, but are you monitoring your system for known vulnerable packages? Most developers will setup a server and then perhaps just periodically update it a few times a year, leaving the server(s) vulnerable for an extended period of time.&lt;/p&gt;

&lt;p&gt;CVE scanners solve this problem by checking the system packages in your operating system against the database and flagging packages that need an update.&lt;/p&gt;

&lt;h3 id=&quot;2-services-audit&quot;&gt;2. Services audit&lt;/h3&gt;

&lt;p&gt;SSH is meant to be secure and is secure when it is configured correctly. Unfortunately, an error configuring SSH can mean that an attacker can apply a brute-force attack against your node(s). Root access, passwordless login, timeout intervals and updates are all points that need to be managed correctly.&lt;/p&gt;

&lt;p&gt;The same is true for any service accessing your server. It’s important to regularly audit your services for threats and vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;3-mtls-mutual-tls-for-authentication&quot;&gt;3. mTLS (mutual TLS) for authentication&lt;/h3&gt;

&lt;p&gt;mTLS solves two problems: password management and client side authentication. There are great tools out there for secrets  management like &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault by Hashicorp&lt;/a&gt;. However, even more sophisticated than passwords and API keys is using TLS certificates for both client and server authentication.&lt;/p&gt;

&lt;p&gt;The difficulty here is in setting up your own CA. &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; can be used but it is generally not advisable to use a public CA for your internal infrastructure. There are some reliable private CAs as a service like &lt;a href=&quot;https://www.wott.io&quot;&gt;WoTT&lt;/a&gt; that can support your needs.&lt;/p&gt;

&lt;h3 id=&quot;4-firewall-configuration&quot;&gt;4. Firewall configuration&lt;/h3&gt;

&lt;p&gt;Firewall configurations seem fairly trivial, yet so often this is the source of massive breaches at large companies (see above Facebook fail). Tracking and managing the appropriate access to servers can be incredibly difficult at scale.&lt;/p&gt;

&lt;h3 id=&quot;5-selinux-and-apparmor&quot;&gt;5. SELinux and AppArmor&lt;/h3&gt;

&lt;p&gt;Security Enhanced Linux (SELinux) and AppArmor are Linux kernel security modules that support access control policies and include mandatory access controls. Enabling these tools is a rigorous process but provides hardening at the application level.&lt;/p&gt;

&lt;p&gt;SELinux is more sophisticated in its settings but consequently presents more pitfalls to the developer since more decisions need to be made. AppArmor provides similar functionality but requires less customization.&lt;/p&gt;

&lt;h2 id=&quot;automate-cyber-security-checks&quot;&gt;Automate cyber security checks&lt;/h2&gt;

&lt;p&gt;So you know what you need to do but that’s only part of the problem. The bigger part of the problem seems to be making sure these things actually get prioritized and handled consistently. We have a few tips for making that happen.&lt;/p&gt;

&lt;h3 id=&quot;behavior&quot;&gt;Behavior&lt;/h3&gt;

&lt;p&gt;Agile development is too dynamic for retroactive security audits. Build security practice into your team processes and make it part of your DNA. Security does not belong in the hands of a single team, it should be part of a mindset and a culture at the organization level.&lt;/p&gt;

&lt;h3 id=&quot;measure-it-to-manage-it&quot;&gt;Measure it to manage it&lt;/h3&gt;

&lt;p&gt;Create metrics to measure the security dimension and manage performance accordingly. Behavior is nurtured through culture, metrics and rewards. Find ways to attribute numbers to security posture of the individual, the team, the asset and reward your people for making improvements.&lt;/p&gt;

&lt;h3 id=&quot;devsecops-is-taking-over&quot;&gt;DevSecOps is taking over.&lt;/h3&gt;

&lt;p&gt;Integrate security tools into your tool chain. Companies like &lt;a href=&quot;snyk.io&quot;&gt;Snyk &lt;/a&gt; have done an excellent job of auditing dependencies and providing developers with real time feedback.  The &lt;a href=&quot;https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf&quot;&gt;NIST&lt;/a&gt; states that it is at least 10x cheaper to implement security before code is committed. It’s also faster to get things right the first time than to use up product and developer time on bug fixes that are retroactively identified by a security team.&lt;/p&gt;

&lt;p&gt;Consider a tool like &lt;a href=&quot;www.wott.io&quot;&gt;WoTT&lt;/a&gt; to monitor, measure and provide actions to improve security.&lt;/p&gt;</content><author><name>Al Esmail</name></author><category term="thoughts" /><category term="Open Source" /><summary type="html">We so often hear from developers that they don’t need to worry about cyber security because they’re too small to be targeted or because they trust their service providers to take care of it for them. Sound like someone you know? Well, let’s start with a quick synopsis of recent cloud failures that were not targeted attacks and where service providers weren’t a silver bullet. Each of these examples were simply failures in security hygiene.</summary></entry><entry><title type="html">The significance of mTLS and why you should care about it</title><link href="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls" rel="alternate" type="text/html" title="The significance of mTLS and why you should care about it" /><published>2019-09-09T08:00:00+00:00</published><updated>2019-09-09T08:00:00+00:00</updated><id>https://wott.io/blog/thoughts/2019/09/09/what-is-mtls</id><content type="html" xml:base="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.&lt;/p&gt;

&lt;h2 id=&quot;what-is-mtls&quot;&gt;What is mTLS?&lt;/h2&gt;
&lt;p&gt;mTLS  is a protocol that verifies the cryptographic identity of both endpoints before initiating communication, rather than just one. This cryptographic verification ensures that your messages and your connection are private, by ensuring that your device’s identity is authenticated and thus, trustworthy. mTLS is a two-way authentication, hence, the m which stands for mutual. Mutual transport layer security means that the two parties, the client and the server, authenticate each other at the same time. Some of the most popular and innovative technology companies out there use mTLS, including Google. Mutual TLS is state-of-the-art security contributing to building a robust security posture. To implement mTLS for IoT, one must set up a secure Public Key Infrastructure (PKI).  PKI is a useful set of security tools and processes needed to manage certificates. Everything related to the provision, management, distribution and revocation of certificates lies in the PKI.&lt;/p&gt;

&lt;h2 id=&quot;why-is-mtls-authentication-important&quot;&gt;Why is mTLS authentication important?&lt;/h2&gt;
&lt;p&gt;IoT security rests on the proper management of machine identities. But, machine identities can be efficiently managed with the use of digital certificates and mTLS. mTLS authentication validates the trust between your device and your server by simultaneously identifying each other as authentic. That is a proper way for connection and data transmission to be established. If the initial validation process fails, access is denied and a connection is not made.&lt;/p&gt;

&lt;h2 id=&quot;what-can-go-wrong-if-you-do-not-use-mtls&quot;&gt;What can go wrong if you do not use mTLS?&lt;/h2&gt;
&lt;p&gt;Not using mTLS may compromise your brand, your company, and your services in a multitude of ways. Consider a scenario where hackers compromise your device and use a commonly shared API key stored on disk to gain access to your back-end servers. This means that any sensitive information stored on your server might become accessible. Without mutual authentication there is no way to confirm client-side identity and isolate the compromised device. Imagine again, the occasion where without mTLS hackers take over a device and start sending falsified data. The data received and transmitted is altered, compromised and unreliable. But the users have no way of knowing this and they keep making critical decisions based on the compromised data received. They analyze metrics, they receive real-time data but…the integrity of the data is compromised so nothing can be trusted. What if the data compromised is related to health and smart healthcare devices? Or if it’s logistics-related data or even manufacturing and smart transportation data? What kind of a cataclysmic or disastrous impact will compromised data have? This is why in IoT infrastructure mTLS is an important piece of the security puzzle. IoT security is all about authenticating, trusting and securing the services provided.&lt;/p&gt;

&lt;h2 id=&quot;how-can-this-affect-you-and-your-company&quot;&gt;How can this affect you and your company?&lt;/h2&gt;
&lt;p&gt;For companies, the financial implications of security breaches are tremendous and difficult to recover from. It is not only the brand’s reputation plummeting but it is also the loss of customers and most importantly the huge fines incurred. The brand’s reliability is questioned and trust is lost.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;Machine identity is a critical element of a robust security system for IoT.  Issuing x509 certificates to devices (and rotating them) provides cryptographically verifiable identities that can be used in mutual authentication through mTLS. This limits the chances of adversaries compromising your devices and keeps their hands off your credentials or confidential data. mTLS is a powerful way to enhance security posture, and ensure that your company is taking the necessary precautions to prevent a breach.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="thoughts" /><category term="Open Source" /><summary type="html">Introduction Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.</summary></entry><entry><title type="html">IoT Encryption Failures and how to avoid them</title><link href="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them" rel="alternate" type="text/html" title="IoT Encryption Failures and how to avoid them" /><published>2019-08-28T12:00:00+00:00</published><updated>2019-08-28T12:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them">&lt;h1 id=&quot;iot-encryption-failures-and-how-to-avoid-them&quot;&gt;IoT encryption failures and how to avoid them&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The stories of misconfigured security systems leading to leaks of client data are common. Take for example the Equifax data breach back in 2017. The vulnerability was detected with a great delay due to expired certificates. According to &lt;a href=&quot;https://www.venafi.com/blog/7-data-breaches-caused-human-error-did-encryption-play-role&quot;&gt;Venafi&lt;/a&gt; &lt;em&gt;The device inspecting encrypted traffic was misconfigured because of a digital certificate that had expired ten months earlier. This along with other oversights enabled a digital attacker to crack into Equifax’s system in mid-May and maintain their access until the end of July&lt;/em&gt;. Another example of how certificates can have a massive impact is the case of &lt;a href=&quot;https://www.zdnet.com/article/ericsson-expired-certificate-caused-o2-and-softbank-outages/&quot;&gt;Ericsson&lt;/a&gt;. An expired certificate of the Swedish Telecommunications Company caused a major outage in 11 countries in December 2018 with over 32 million users affected by it.&lt;/p&gt;

&lt;p&gt;The reality of the situation for IoT or any stack, is that there is no single solution, button or line of code to protect it in its whole. Devices use different platforms, servers, connectivity domains, and protocols. There is potential for failure which can lead to serious data-breaching issues. In the case of encryption, developers may be unwittingly more susceptible or prone to error than they realize.&lt;/p&gt;

&lt;h2 id=&quot;iot-encryption-failures&quot;&gt;IoT Encryption Failures&lt;/h2&gt;

&lt;p&gt;The problem with devices and networks does not always lie in not having encryption but in the way encryption is applied. Following security guidelines is a good step but like many security systems, the devil is in the details and being overzealous is a good thing in this case. Let’s take a closer look:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Misconfigured IoT encryption&lt;/strong&gt;. The added layers and the diversity of protocols in IoT create additional failure points where encryption can be incorrectly implemented (e.g. sensor to IoT device via SCADA &amp;gt; IoT device to IoT gateway via LPWAN &amp;gt; IoT gateway to MQTT broker via TCP/IP). A single hole caused by a configuration mistake on the platform, on the network, on the cloud or on the device may compromise the entire tech stack. A slight mistake could have tremendous consequences and land your company some unsavoury headlines in the press.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regulatory compliance alone does not protect devices&lt;/strong&gt;. Never assume that implementing a basic set of guidelines is enough. In fact, it is merely the beginning. Regulatory compliance for the sake of abiding to a set of standard rules is not security. What should be done is use those rules as a base and enhance them with IoT specific security solutions that suit your deployment. This way, security and IoT encryption are maximised on all layers and at all points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not keeping track of machine identity protection&lt;/strong&gt;. Consider the scale of managing a fleet of thousands of devices (millions are possible, but let’s not break our minds). Managing SSL/TLS certificates at IoT scale is a daunting task, particularly if you issue the certificates manually (which is why most fail to use it altogether). Imagine the workload and the time wasted on a process which could and should be automated. TLS protocols grant secure communication over a network (assuming properly implemented). Security best practice dictates that certificates should have a lifespan of a days or hours to mitigate the impact of a leak. This is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;automating TLS certificate and key-issuing&lt;/a&gt; comes handy. By automating the certificate-issuing process, we reduce the burden that developers would face and eliminate human error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Key Management&lt;/strong&gt;. Encryption keys are like passwords. Storing your keys on disk is not ideal.The only way to efficiently handle this situation is to have a Trusted Platform Module (TPM). TPM is a cryptographic Module which enhances computer security and boosts privacy. It is designed to ward off software compromising. Unfortunately this is still relatively rare outside of high-compliance devices largely due to the added complexity and added hardware components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using weak, vulnerable, unknown or untested cryptographic algorithms&lt;/strong&gt;. Encryption is performed based on ciphers, complex algorithms and best developed by mathematical sophisticates. Some companies or developers choose to build and use their own encryption algorithms. This is a risky practice, particularly if it is not updated or reviewed for a prolonged period. Moreover, encryption protocols should undergo rigorous peer review and audit as is done in &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;open source&lt;/a&gt; security tools. It is better and more secure to use the already-tested and secure algorithms which are available out there. Some of the most popular encryption algorithms are: RSA, Advanced Encryption Standard (AES) and ECDSA. These are updated and they evolve so that they can help fend off cyber-attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relying solely on cloud providers for securing your data&lt;/strong&gt;. Securing data on the cloud and opting for a trustworthy provider is essential yet, this is only one piece of the security puzzle. Admittedly, cloud providers are all doing a good job towards securing the data we all store in the cloud. This, however, does not mean that a data leak is not possible. The cloud only covers one area of your architecture and even on the cloud, there are settings that must be configured correctly by the customer. Do you really believe that a 3rd party service, even AWS is taking full responsibility for your entire stack? Will it matter when -your- client data is leaked? IoT encryption is not only about securing a certain layer or point in the architecture. It needs to be holistic and cover database to customer data, to identity and access management, and of course, down to the IoT device itself. In cases of organisations and enterprises, this is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;DevSecOps&lt;/a&gt; can be of great help.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The complexity of the IoT ecosystem and the uniqueness of every deployment creates many potential IoT encryption failures and security failures in general. These mistakes are avoided only with the provision of easy-to-integrate IoT security solutions. We at &lt;a href=&quot;https://wott.io/&quot;&gt;Wott&lt;/a&gt; offer tools for developers to help harden the security of IoT devices and to fix vulnerabilities during the development process. We offer a seamless and easy-to-use solution which is open source, cloud-agnostic and integrates easily with most  common hardware and operating system providers so that your IoT infrastructure remains secure.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">IoT encryption failures and how to avoid them</summary></entry><entry><title type="html">The Future of IoT</title><link href="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot" rel="alternate" type="text/html" title="The Future of IoT" /><published>2019-08-16T13:00:00+00:00</published><updated>2019-08-16T13:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot">&lt;h1 id=&quot;the-future-of-iot&quot;&gt;The Future of IoT&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Future of IoT is both fascinating and challenging. As the number of connected devices is expected to triple by 2025, there are many significant questions and issues rising. Such as what does this mean for the Industry? What implications does this create?&lt;/p&gt;

&lt;p&gt;To start with, security is the primary concern. Smarter devices does not imply that security is smart too. On the contrary, the larger the number of distinct, non-interoperable devices connected, the larger the risk of a security breach - especially when security sits on the user’s network alone. In the era of Industry 4.0, as IoT expands into every aspect of our lives, managing the risk presented by these edge devices is a daunting task.&lt;/p&gt;

&lt;p&gt;But let us take a closer look at what the future of IoT will bring about, its aspiring achievements and significant challenges.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-and-the-different-industries-achievements-and-challenges&quot;&gt;The Future of IoT and the different Industries: Achievements and Challenges&lt;/h2&gt;

&lt;h3 id=&quot;smart-transport&quot;&gt;Smart Transport&lt;/h3&gt;
&lt;p&gt;The Future of IoT is all about connected airports, seaports, train stations and roads, which will allow for seamless movement of goods and jetsetters alike. Freight will be shipped across countries and borders with more efficiency and greater visibility.&lt;/p&gt;

&lt;p&gt;This means that high-quality infrastructure and updated systems will keep all devices, vehicles and terminals continuously connected and informed about the latest data and conditions. This also means that the amount of data transmitted and received will be monumental.&lt;/p&gt;

&lt;p&gt;Now imagine a minor flaw in the infrastructure, a hiccup in security and you can understand the massive impact it might have on business continuity and more importantly on human life. The existence of the ‘future of IoT’ depends on data security being ongoing industry goal.&lt;/p&gt;

&lt;p&gt;But how can you make sure that security is not breached and important data is not stolen? We believe that in the future of IoT, security-by-design is the only solution. The only way to safely guarantee the secure transmission of mission critical data, across devices, networks and systems is to implement security into every endpoint. Security by obfuscation was a good option and worked well for more isolated systems. But widely used systems (like those deployed on the billions of edge devices, obviously) are too easy for hackers to access, understand and compromise. Security for IoT must work even if a hacker can compromise a device.&lt;/p&gt;

&lt;h3 id=&quot;smart-homes-smart-living-smart-mobility&quot;&gt;Smart Homes, Smart Living, Smart Mobility&lt;/h3&gt;
&lt;p&gt;Smart home devices will create an autonomous ecosystem of efficiency, sustainability and smarter solutions. Imagine a world where your Volkswagen can actually talk to your thermostat and let it know when to turn on the A/C. The vehicle itself will come with built-in, real-time data collectors, available to make decisions and choose what is best for the user.&lt;/p&gt;

&lt;p&gt;In the future of IoT, autonomous devices will have agency - they will be able to make decisions for the user and provide the best customised experience. But if your car is making decisions for you, should the software not be well-maintained and up to date? Should you not feel completely comfortable with it making all of your decisions? Updates and maintenance of software should be automated and regular.  Users can easily forget or ignore reminders to update devices. The future of IoT calls for a seamless solution that will guarantee the maintenance, updates and &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;security&lt;/a&gt; of IoT devices without burdening the end user.&lt;/p&gt;

&lt;h3 id=&quot;industrial-iot&quot;&gt;Industrial IoT&lt;/h3&gt;
&lt;p&gt;The integration of IoT into industrial processes opens up new levels of efficiency. This is where IoT can be most disruptive as enterprise employees with the word ‘digital’ or ‘innovation’ in their titles leverage their MBAs to prepare powerpoint presentations that will transform and propel business into the future. (I can’t help teasing the corporates sometimes.) In the coming years, even the most traditional of brands and companies will turn to IoT to upscale both their services and their profits.  According to &lt;a href=&quot;https://www.accenture.com/t20150523t023633z__w__/us-en/_acnmedia/accenture/conversion-assets/dotcom/documents/global/pdf/dualpub_11/accenture-driving-unconventional-growth-through-iiot.pdfla=en&quot;&gt;Accenture&lt;/a&gt; the IIoT market will reach $500 billion by 2020.&lt;/p&gt;

&lt;p&gt;Imagine then that a tiny misconfiguration in the tech stack or the cloud could have dramatic consequence to business continuity (just as Maersk). For us at WoTT, the future of IoT is all about foreseeing these pitfalls and preventing them. One of the most successful ways to reduce mistakes in security and software is by including developers in the design process. Developers should be present from the beginning and should play a significant role in the design of the IoT deployment.  Involving &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;developers&lt;/a&gt; in the process will only secure the development even further and will save the industry a lot of money as the repairs after launching will be fewer and less costly.&lt;/p&gt;

&lt;h3 id=&quot;iot-and-healthcare&quot;&gt;IoT and Healthcare&lt;/h3&gt;
&lt;p&gt;From heart monitors to telemedicine and robotic surgery, edge devices can transform an industry that is stretched desperately thin. Remote health monitoring is a great solution delivering the best of science and technology to the remotest of places and even provide preventative care.&lt;/p&gt;

&lt;p&gt;With this in mind, how can we make sure that our valuable Healthcare related data is not compromised? For one, (you guessed it) security should be at the core of any device. It cannot be on the network alone, it must include the device itself and have multiple layers to prevent compromise.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-as-we-see-it&quot;&gt;The Future of IoT as we see it&lt;/h2&gt;

&lt;p&gt;In the Future of IoT, privacy and security are fundamental parameters. One way to cope is to create open source solutions - a robust ecosystem of developer tools for &lt;a href=&quot;https://www.memfault.com&quot;&gt;bug fixes&lt;/a&gt;, remote management and security. Crowdsourcing knowledge and allowing more individuals to contribute to the security of the ecosystem and as we see it, a prerequisite to the future of IoT.  &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Open source&lt;/a&gt; will pave the way to success with a common set of best practices and guidelines to foster interoperability - a key requirement for keeping up with the scale of managing connectivity at the edge.&lt;/p&gt;

&lt;p&gt;We at &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; envision the Future of IoT is full of &lt;a href=&quot;https://wott.io/blog/news/2019/06/20/why-we-are-doing-what-we-do&quot;&gt;neat use cases&lt;/a&gt; powered by trusted devices, fully-integrated and supported by a crowdsourced network of contributors where our solutions marvel at helping you make the most of IoT.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">The Future of IoT</summary></entry><entry><title type="html">IoT Security Issues and Challenges</title><link href="https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges" rel="alternate" type="text/html" title="IoT Security Issues and Challenges" /><published>2019-08-12T13:00:00+00:00</published><updated>2019-08-12T13:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges">&lt;h2 id=&quot;iot-security-issues-and-challenges&quot;&gt;IoT Security Issues and Challenges&lt;/h2&gt;
&lt;p&gt;IoT Security issues are quite a challenge for this burgeoning industry. There is a growing number of devices, applications and systems which turn to IoT. This helps them to upscale their efficiency and their services and to make life easier for users. So let us take a closer look at the industry.&lt;/p&gt;

&lt;h3 id=&quot;the-internet-of-things&quot;&gt;The Internet of Things&lt;/h3&gt;
&lt;p&gt;This buzzing, new industry sports cutting-edge technology. It enhances digitisation while at the same time it produces demanding challenges.
But before we delve into these in more detail, let us have a look at the state of IoT at the moment.&lt;/p&gt;

&lt;p&gt;According to a report by &lt;a href=&quot;https://iot-analytics.com/state-of-the-iot-update-q1-q2-2018-number-of-iot-devices-now-7b/&quot;&gt;IoT Analytics&lt;/a&gt; there are over 17 Billion devices connected to IoT. As one can understand, this number will only multiply in the coming years. The devices connected to IoT range greatly.  From Smart Home Automation devices, routers, printers to thermostats, refrigerators and cameras. Amazon Alexa and Google Assistant too. Smart locks, smart watches, ATMs, industrial machines, manufacturing processes and applications. Smart clothing items, drones, solar panels, automobile navigation, infotainment systems, advanced medical devices.  The list is long and it is updated as more types of devices, gadgets and applications are added.&lt;/p&gt;

&lt;p&gt;Regardless of the technology or the number  of IoT devices, the main challenge remains one: That is &lt;em&gt;Security&lt;/em&gt; and everything about it.&lt;/p&gt;

&lt;h2 id=&quot;iot-security-issues&quot;&gt;IoT Security Issues&lt;/h2&gt;

&lt;h3 id=&quot;unsecured-devices&quot;&gt;Unsecured Devices&lt;/h3&gt;
&lt;p&gt;With the number of connected devices on the rise, consumers play an integral part in Security. Manufacturers upon launching a device, should equip it with a strong default password. They should also advise consumers on how to make their lives with smart gadgets more secure. Most consumers are not well-informed about the significance of changing the default password on their devices. Thus, the responsibility falls on the manufacturers to maintain a more secure network and to educate the consumers of the necessary steps they need to take.&lt;/p&gt;

&lt;h3 id=&quot;data-privacy&quot;&gt;Data Privacy&lt;/h3&gt;
&lt;p&gt;Nowadays, power plants, manufacturing processes and healthcare devices connect to IoT. These critical infrastructures constitute IoT a treasure trove of data. One mistake in security and precious confidential data might end up in the hands of criminals.  One leak in Privacy and hackers can gain access to confidential, private data. Data transmission and reception as well as maintaining the privacy of the users must be a top priority of the IoT industry. With so many applications, gadgets and processes connected, even lives can be at stake. This is one of the reasons why &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Security-by-design&lt;/a&gt; is a great solution, particularly  for Enterprise IoT.&lt;/p&gt;

&lt;h3 id=&quot;insufficient--testing-and-updating&quot;&gt;Insufficient  Testing and Updating&lt;/h3&gt;
&lt;p&gt;As the number of connected devices is in constant rise, one of the major IoT security issues is keeping the devices updated. Though IoT is a highly-digitised industry, it is amazing to see that the devices used, do not receive many updates.  All the gadgets, applications and devices need to be sufficiently tested before launched. Then, they should be updated frequently, with patches and releases enhancing their security.&lt;/p&gt;

&lt;h3 id=&quot;iot-malware-and-ransomware&quot;&gt;IoT Malware and Ransomware&lt;/h3&gt;
&lt;p&gt;Some digitised appliances and some gadgets too, have the same computer power as a tablet. This means that they can be compromised, hijacked by hackers. Then, they can become a powerful weapon which hackers can use to compromise the system in many ways. At WoTT, we believe that IoT security is a complicated issue. It can not be achieved by obfuscation; on the contrary, it should be &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Open-Source&lt;/a&gt; where knowledge of operations is shared and put to good use.&lt;/p&gt;

&lt;p&gt;One of the ways IoT devices can be used by hackers is to cause DDoS attacks. Hackers hijack computers and add them to a network of malicious botnets conducting DDoS attacks. DDoS attacks result when multiple compromised systems flood the resources of a targeted system with traffic. Thus, as it is easy for computers to be hijacked and participate in a DDoS attack without the owner knowing, so are smart devices, appliances and gadgets too. They can be compromised and used by a hacker.&lt;/p&gt;

&lt;h3 id=&quot;so-what-can-go-wrong-with-iot-security-issues&quot;&gt;So what can go wrong with IoT Security issues?&lt;/h3&gt;
&lt;p&gt;Assuming that there is a compromise of some sort in an IoT device or gadget many things can go wrong. First, you may no longer have control of it - or &lt;em&gt;lose availability&lt;/em&gt;. This has a financial impact, of course. Yet, there are many other parameters and ways in which a hijacked device can affect you, your life and everything around it. Hackers may turn your IoT device into a spam machine sending spam emails to everyone - &lt;em&gt;damaging your reputation&lt;/em&gt;.  They can transmit false signals, such as a false battery charging report - &lt;em&gt;disrupting your operation&lt;/em&gt;.  Worse yet, hackers can compromise entire networks to interfere with entire manufacturing plants, energy grids or fleets of vehicles. What is truly scary is the potential for loss of life when thinking of medical devices or heavy machinery.&lt;/p&gt;

&lt;h3 id=&quot;a-solution-to-the-iot-security-issues&quot;&gt;A solution to the IoT security issues&lt;/h3&gt;
&lt;p&gt;We at WoTT aim at making the IoT industry a web of trusted devices, applications and gadgets. A place where security is of primary importance. WoTT is the go-to place as the network of connected devices grows.  Security, knowledge and collaboration between devices, manufacturers and developers is our philosophy. So, we bring to you a developer first &lt;a href=&quot;https://wott.io/&quot;&gt;Solution&lt;/a&gt; to manage certificates and credentials, and find vulnerabilities in your build.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">IoT Security Issues and Challenges IoT Security issues are quite a challenge for this burgeoning industry. There is a growing number of devices, applications and systems which turn to IoT. This helps them to upscale their efficiency and their services and to make life easier for users. So let us take a closer look at the industry.</summary></entry><entry><title type="html">Using WoTT to Secure a Paho MQTT Client</title><link href="https://wott.io/blog/tutorials/2019/07/19/paho-mqtt" rel="alternate" type="text/html" title="Using WoTT to Secure a Paho MQTT Client" /><published>2019-07-19T13:00:00+00:00</published><updated>2019-07-19T13:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/19/paho-mqtt</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/19/paho-mqtt">&lt;h1 id=&quot;using-wott-to-secure-a-connection-from-a-paho-mqtt-client-to-an-mqtt-server-mosquitto-mqtt-example-included&quot;&gt;Using WoTT to Secure a Connection from a Paho MQTT Client to an MQTT Server (Mosquitto MQTT Example included)&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In a previous &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt&quot;&gt;example&lt;/a&gt; we discussed how to secure connections between an Mosquitto MQTT broker and the Mosquitto client. In that there are several different brokers for an MQTT brokers, there are also several client implementations for the MQTT protocol. There are several libraries available for multiple MQTT clients in various programming languages. This example looks at Paho, a project that was adopted into the Eclipse Foundation much like Mosquitto, that specifically implements a client for MQTT. We will be looking at the Python implementation of Paho. Although you can use any other MQTT server, we already have a Mosquitto server from our previous example that we can use for this tutorial.&lt;/p&gt;

&lt;p&gt;Here we will show how simple it is to secure a Mosquitto server and a non-Mosquitto client (Paho) using WoTT. The principles shown here can be applied to any MQTT client accessing a Mosquitto server.&lt;/p&gt;

&lt;p&gt;You will need two devices, either a Debian machine or Raspberry Pi. In a set up where you have both, it is preferable to set up the Debian machine as your server device. Both these devices will need to have the &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;WoTT Agent&lt;/a&gt; installed and &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot;&gt;Docker CE&lt;/a&gt; installed. Note installation instructions for Docker on Pi is different so refer to the link above for appropriate instructions.&lt;/p&gt;

&lt;p&gt;This example contains code snippets. We recommend you clone our &lt;a href=&quot;https://github.com/WoTTsecurity/examples&quot;&gt;examples&lt;/a&gt; repository by doing the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/WoTTsecurity/examples.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to manually install the files that you need. Refer to our other code snippet examples (&lt;a href=&quot;https://wott.io/blog/tutorials/2019/06/27/adafruit-io&quot;&gt;Adafruit IO&lt;/a&gt;, &lt;a href=&quot;https://wott.io/blog/tutorials/2019/06/16/simple-webapp&quot;&gt;Simple WebApp&lt;/a&gt;, etc) for instructions to do this. However, if you are going to be looking at our other tutorials in the future we recommend you have the repository readily available.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-server-mosquitto&quot;&gt;Setting up the server (Mosquitto)&lt;/h2&gt;

&lt;p&gt;Please refer to our &lt;a href=&quot;(https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt)&quot;&gt;Mosquitto MQTT example&lt;/a&gt; for in depth information on how to set up the server. If you are familiar with this example and want to just quickly ‘set up and go,’ do the following:&lt;/p&gt;

&lt;p&gt;Navigate to the directory where you have cloned our ‘examples’ repository:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples/mosquitto-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alter the ACL file &lt;code class=&quot;highlighter-rouge&quot;&gt;permissions.acl&lt;/code&gt; with your WoTT device details for the relevant permissions (remember we want to grant some access to your client device). To find the WoTT Device ID:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wott-agent whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are still using the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;/wott/temperature&lt;/code&gt; to publish and subscribe messages to and from.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-client-paho&quot;&gt;Setting up the client (Paho)&lt;/h2&gt;

&lt;p&gt;This is where our instructions differ from setting up the Mosquitto client. It is not significantly more complicated but Paho has a different set up. First, you will need to have Paho on your system.
Navigate to the directory containing our &lt;code class=&quot;highlighter-rouge&quot;&gt;examples&lt;/code&gt; respository. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;paho-mqtt-client&lt;/code&gt; folder like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples
$ cd paho-mqtt-client
$ pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two files in this folder - a &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file and the client itself &lt;code class=&quot;highlighter-rouge&quot;&gt;paho-connect-wott.py&lt;/code&gt;. The above command installs the version of the Paho client needed for this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can use whatever version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; tool you have.&lt;/p&gt;

&lt;p&gt;Now that Paho is installed, you need to set your server variables for Paho to connect to. Do the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export MQTT_SERVER=ServerDeviceID.d.wott.local
$ export MQTT_TOPIC=my/topic
$ export MQTT_PORT=8333 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where for this example &lt;code class=&quot;highlighter-rouge&quot;&gt;my/topic&lt;/code&gt; refers to the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;my/topic&lt;/code&gt; will default to &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; if not specified otherwise).&lt;/p&gt;

&lt;p&gt;Feel free to try and run the client now using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python3 paho-connect-wott.py&lt;/code&gt;. You will notice that this fails. 
This is because we haven’t established a route for the client to connect to the server device through - we need to alter the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file on the client to add a route to the server. In the Mosquitto example, we set this up using Docker, but here you will need to manually add the hostname. So, in whatever text editor you prefer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo $EDITOR /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see a file containing something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1    localhost
127.0.1.1    your_machine's_name
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add your server device’s IP followed by the ‘domain’ that you will be calling it by- the device’s WoTT ID (do not remove the other ones!) like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP.Of.Docker.Server  ServerDeviceID.d.wott.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and exit. Now you have a route to the server!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we have discussed finding your IP in previous examples. There are several commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr show&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;, etc. Take your pick as long as you choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;inet&lt;/code&gt; address for your server IP.&lt;/p&gt;

&lt;p&gt;Now we can run the client using Python 3. The output will look like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo python3 paho-connect-wott.py
rc: 0
Subscribed: (1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you check your server, you will see that it has registered a connection from the Paho client.&lt;/p&gt;

&lt;h2 id=&quot;finishing-notes&quot;&gt;Finishing notes&lt;/h2&gt;

&lt;p&gt;You are now securely set up with a Paho MQTT client. The client accesses the server through the server’s CN (common name). This is how the client verifies the server (this is defined in our &lt;code class=&quot;highlighter-rouge&quot;&gt;mosquitto.conf&lt;/code&gt; file for the Mosquitto server if you can recall) unlike a typical browser where there is only one-way verification. You can essentially think of it as the client matching the server name to that which is one the ACL file (permissions).&lt;/p&gt;

&lt;p&gt;The example we provided contains a simple subscriber. Please experiment with a Paho publisher yourself and other clients. We want you to feel free to break our code! It’s the best way to develop.&lt;/p&gt;

&lt;p&gt;Hopefully you’ve now grasped the basic concepts of setting up at least two different types of MQTT server/client with the cryptographic identity that WoTT provides so you don’t actually need to worry about the details of the security itself.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Using WoTT to Secure a Connection from a Paho MQTT Client to an MQTT Server (Mosquitto MQTT Example included)</summary></entry><entry><title type="html">Connecting Edge IoT devices with Kubernetes</title><link href="https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes" rel="alternate" type="text/html" title="Connecting Edge IoT devices with Kubernetes" /><published>2019-07-18T08:00:00+00:00</published><updated>2019-07-18T08:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes">&lt;h1 id=&quot;bridging-edge-iot-devices-with-kubernetes&quot;&gt;Bridging Edge IoT devices with Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Medium to Expert&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx&quot;&gt;last blog post&lt;/a&gt;, we covered how to configure Nginx to use Mutual TLS (mTLS). This illustrated how mTLS can both simplify the back-end, while also make it more secure. In this article, we will take this one step further and integrate this with &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;. If you haven’t read the last blog post, that would be a good place to start.&lt;/p&gt;

&lt;p&gt;Please note that this article assumes that you are familiar with Kubernetes and understands the fundamentals.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;Before we dive into the actual configuration, we will assume that you have the following already configured:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Kubernetes cluster (d’oh!)&lt;/li&gt;
  &lt;li&gt;A valid SSL certificate for your domain
    &lt;ul&gt;
      &lt;li&gt;You can use &lt;a href=&quot;https://github.com/jetstack/cert-manager/&quot;&gt;cert-manager&lt;/a&gt; from our friends at &lt;a href=&quot;https://www.jetstack.io/&quot;&gt;Jetstack&lt;/a&gt; if you want to use Let’s Encrypt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx&quot;&gt;Nginx Ingress Controller&lt;/a&gt; configured with the SSL certificate(s)
    &lt;ul&gt;
      &lt;li&gt;It is recommended that you use the &lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/nginx-ingress&quot;&gt;Nginx Helm Chart&lt;/a&gt; for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Familiarity with &lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;With the cluster and ingress controller up and running, you should be able to route traffic to your services. If you’re not familiar with this part, we recommend that you take a look at this Katacoda’s &lt;a href=&quot;https://www.katacoda.com/courses/kubernetes/create-kubernetes-ingress-routes&quot;&gt;Kubernetes Ingress training scenario&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before proceeding further, we will assume that you now have an Nginx Ingress controller deployed, with some kind of service behind it that you can route traffic to in the ‘foobar’ namespace. In the example below, we will call this service ‘foobar,’ and it listens on port 80.&lt;/p&gt;

&lt;h2 id=&quot;configuring-mtls-for-the-ingress-controller&quot;&gt;Configuring mTLS for the Ingress Controller&lt;/h2&gt;

&lt;p&gt;Because the Nginx Ingress controller is already configured to support mTLS and subsequently does all the heavy-lifting, all we really need to do is to tell our Ingress object to use the built-in functionalities.&lt;/p&gt;

&lt;p&gt;Before we do this however, we first need to download the WoTT CA and upload this to the cluster. Otherwise Nginx will not be able to verify the certificate.&lt;/p&gt;

&lt;p&gt;To do this, let’s assume that our application will run in the ‘foobar’ namespace within the cluster.&lt;/p&gt;

&lt;p&gt;Create the namespace if it doesn’t already exist:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl create namespace foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download the WoTT CA certificate bundle:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s https://api.wott.io/v0.2/ca-bundle | \
  jq -r .ca_bundle &amp;gt; wott-ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upload the CA certificate to the cluster:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl create secret generic wott-ca \
  -n foobar \
  --from-file=ca.crt=wott-ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can verify that we the secret was properly created by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get secrets -n foobar
NAME                  TYPE                                  DATA      AGE
[...]
wott-ca               Opaque                                1         4s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With CA in place, we can move on to configuring the &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress object&lt;/a&gt;. The Ingress object is responsible for informing the Ingress Controller that it should route traffic addressed to a given hostname to a particular service.&lt;/p&gt;

&lt;p&gt;Here’s an example of the YAML file for such configuration (here we are using cert-manager for the SSL configuration):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    certmanager.k8s.io/acme-challenge-type: http01
    certmanager.k8s.io/issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: &quot;true&quot;
    nginx.ingress.kubernetes.io/auth-tls-secret: foobar/wott-ca
    nginx.ingress.kubernetes.io/auth-tls-verify-client: &quot;on&quot;
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: &quot;2&quot;
  name: mtls-test
  namespace: api
spec:
  rules:
  - host: mtls-test.example.com
    http:
      paths:
      - backend:
          serviceName: foobar
          servicePort: 80
        path: /?(.*)
  tls:
  - hosts:
    - mtls-test.example.com
    secretName: le-secret-mtls-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The secret for mTLS lies in the various ‘auth-tls’ annotations that we have above. These annotations tell Nginx to configure auth-tls (i.e. mTLS) for this endpoint.&lt;/p&gt;

&lt;p&gt;We can now leverage the HTTP headers that Nginx is passing on to the appserver(s) just like we did in our &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx&quot;&gt;Nginx mTLS blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The two headers that you likely want to use are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP_SSL_CLIENT_VERIFY&lt;/li&gt;
  &lt;li&gt;HTTP_SSL_CLIENT_SUBJECT_DN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have this all configured, you can now communicate directly from your IoT devices to your Kubernetes cluster using mTLS and the WoTT certificate as your identity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo curl \
  --key /opt/wott/certs/client.key \
  --cert /opt/wott/certs/client.crt \
  https://mtls-test.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully this all made sense. If not, feel free to reach out to use on Twitter at &lt;a href=&quot;https://twitter.com/wottsecurity&quot;&gt;@WoTTSecurity&lt;/a&gt;.&lt;/p&gt;</content><author><name>Viktor Petersson</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Bridging Edge IoT devices with Kubernetes</summary></entry></feed>