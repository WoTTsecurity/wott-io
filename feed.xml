<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://wott.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wott.io/" rel="alternate" type="text/html" /><updated>2019-11-28T11:14:45+00:00</updated><id>https://wott.io/feed.xml</id><title type="html">Web of Trusted Things</title><subtitle>Seamless security audit of Linux systems for DevOps teams.</subtitle><entry><title type="html">Introducing WoTT’s GitHub Integration</title><link href="https://wott.io/blog/news/thoughts/2019/11/27/introducing-the-wott-github-integration" rel="alternate" type="text/html" title="Introducing WoTT's GitHub Integration" /><published>2019-11-27T08:00:00+00:00</published><updated>2019-11-27T08:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/11/27/introducing-the-wott-github-integration</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/11/27/introducing-the-wott-github-integration">&lt;p&gt;There’s no doubt that GitHub has become one of the most popular platforms for developer collaboration and communication. Increasingly, GitHub is also used for project management across developer and Dev(Sec)Ops teams. Because of this, it is increasingly where the security fixes are being tracked too.&lt;/p&gt;

&lt;p&gt;For instance, GitHub recently announced their &lt;a href=&quot;https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies&quot;&gt;Security Alerts&lt;/a&gt;, which helps you audit vulnerabilities in dependencies. There’s also &lt;a href=&quot;https://snyk.io/docs/github/&quot;&gt;Snyk’s GitHub integration&lt;/a&gt;, that does similar audits. Hence, GitHub is becoming the hub for tracking security issues.&lt;/p&gt;

&lt;p&gt;While GitHub’s Security Alerts (and Snyk) are great ways to secure your application dependencies, they only track part of the security posture. They neglect VM (or bare metal) security audits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is why we are super excited to announce WoTT’s GitHub integration.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With WoTT’s GitHub integration, the &lt;code class=&quot;highlighter-rouge&quot;&gt;wott-bot&lt;/code&gt; will automatically generate GitHub Issues based on our Recommended Actions. You can then easily assign ownership and schedule the work as part of your sprints.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Example of an event in GitHub&quot; src=&quot;https://wott.io/assets/blog/wott-github-integration-45260a48ef9207f144d7890dd79832ffa570f89c32e186286dc1f1ae44dc6f8e.png&quot; integrity=&quot;sha256-RSYKSO+SB/FE14kN15gy/6Vw+Jwy4YYobcHxrkTcb44=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/077f30-d7cefe4291fe79228a6379f6e18916dac6089a2924f873114bba0328eac9ae3f.png 2x, https://wott.io/assets/9055a0-32fb1fc5caa6d417f18253d94a69753f958939369df6f0e7e11c79a151bb0d11.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The integration is currently in beta and is available to all users.&lt;/p&gt;

&lt;p&gt;To get started, login to your &lt;a href=&quot;https://dash.wott.io&quot;&gt;WoTT Dashboard&lt;/a&gt; and navigate to your profile (upper right-hand corner) and select GitHub Integration.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;GitHub configuration in Dashboard&quot; src=&quot;https://wott.io/assets/blog/wott-profile-github-953febd93ee097d23151bac5e9f3802522ff495c1668e435b7ffd66ef3cb941f.png&quot; integrity=&quot;sha256-lT/r2T7gl9IxUbrF6fOAJSL/SVwWaOQ1t//WbvPLlB8=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/c2bd9c-73668cc644b9d283d8f1b72383ab6d2a84d7bf49cdac91975ff74f01210a8d2d.png 2x, https://wott.io/assets/f9ef83-876559d1fd25e6e3ac09f2be2f7a401236a1c4f99c3e1afa7ede3bd83471953a.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the ‘Authorize GitHub’ and follow the wizard to authorize the &lt;code class=&quot;highlighter-rouge&quot;&gt;wott-bot&lt;/code&gt; to create issues. The repository can be either public or private. Since these are security issues, it is recommended that you use a private repository. Also, please do note that WoTT &lt;strong&gt;cannot&lt;/strong&gt; read your code base. It can only create GitHub issues.&lt;/p&gt;

&lt;p&gt;Once you’re finished the wizard, you should be able to select the repository that you’ve granted access from the drop down list.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;GitHub configuration in Dashboard&quot; src=&quot;https://wott.io/assets/blog/wott-github-finished-d3d23b862b2a5f88dca131ff81e538f6c1656370a039adefe0b5e496fd69d3ba.png&quot; integrity=&quot;sha256-09I7hisqX4jcoTH/geU49sFlY3CgOa3v4LXklv1p07o=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/153264-22116197a8240de80da85296f14b274f0bdcdfdb5985d1f40142152437d08a88.png 2x, https://wott.io/assets/88d86d-115692dc2431b01a1e8de6f0a22116b69dd3db3795dab8c3906f0778c65c9a1f.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, you now need to select “Install App” for the bot to be able to create Issues. Once that’s done, you should start seeing GitHub Issues created as they are discovered by WoTT (and updated when something changes).&lt;/p&gt;

&lt;p&gt;If you got any questions or issues, please drop us a line at hey@wott.io or reach out to us at &lt;a href=&quot;https://twitter.com/wottsecurity&quot;&gt;@WoTTSecurity&lt;/a&gt; on Twitter.&lt;/p&gt;</content><author><name>Viktor Petersson</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="announcement" /><category term="github" /><category term="devsecops" /><category term="devops" /><summary type="html">There’s no doubt that GitHub has become one of the most popular platforms for developer collaboration and communication. Increasingly, GitHub is also used for project management across developer and Dev(Sec)Ops teams. Because of this, it is increasingly where the security fixes are being tracked too.</summary></entry><entry><title type="html">How to Securely Configure MongoDB</title><link href="https://wott.io/blog/tutorials/2019/11/24/mongodb" rel="alternate" type="text/html" title="How to Securely Configure MongoDB" /><published>2019-11-24T09:00:00+00:00</published><updated>2019-11-24T09:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/11/24/mongodb</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/11/24/mongodb">&lt;h1 id=&quot;how-to-securely-configure-mongodb&quot;&gt;How to Securely Configure MongoDB&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Intermediate&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading Time&lt;/strong&gt;: 15-20 Minutes&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/what-is-mongodb&quot;&gt;MongoDB&lt;/a&gt; is a NoSQL, document database that is widely used by companies and individuals. Its popularity and support makes it a contender for one of the best options for database needs. Unfortunately, its popularity makes it a target for experienced and mediocre attackers alike. This article will go over the most common security risks to MongoDB and how to mitigate them. Hopefully by the end of this article, your MongoDB deployment will be impervious to most attacks.&lt;/p&gt;

&lt;p&gt;We also assume that you have quite a bit of knowledge when using MongoDB as you have probably created a database and have come here looking to secure it. If you have little knowledge in MongoDB, you can continue to read this post and learn the theory behind securing your database, however we strongly recommend taking a course and learning the syntax and how MongoDB works to gain a better understanding. With that being said, let’s get into it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: WoTT is a service that checks and audits your node network including MongoDB deployments.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;common-risks-and-how-to-mitigate-them&quot;&gt;Common Risks and How to Mitigate Them&lt;/h2&gt;

&lt;h3 id=&quot;1-authentication-and-authorization&quot;&gt;1. Authentication and Authorization&lt;/h3&gt;

&lt;p&gt;By default, when MongoDB is installed, it does without needing password credentials when accessing the database. It is highly recommended that you add users with login credentials, and an admin user with elevated privelages.&lt;/p&gt;

&lt;p&gt;Before doing so, you need to enable Access Control. By enabling access control, you enforce user authentication, requiring users to identify themselves before accessing your MongoDB deployment. Assuming you have the mongodb server running, connect to the server using a terminal as the client by executing the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;NB: You probably need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;port--&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;host--&lt;/code&gt; after the mongo command depending on how you set up your deployment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now that you are in the database as a client, you must switch to the admin database to add a new user. Simply execute the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ use admin
switched to db admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to create an admin user, to do so, run the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.createUser(
   {
       user: &quot;admin&quot;,
       pwd: &quot;placeholder&quot;,
       roles [{role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot;}, &quot;readWriteANyDatabase&quot;]
   }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure to replace placeholder with a strong password, you could alternatively use the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwordPrompt()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates an admin user that has access to every aspect of any database in your deployment, so be cautious as to who you share that information with. Since MongoDB doesn’t enable authorization/authentication by default, even with the creation of an admin user, users will still have access to all aspects of every database in your deployment without the need to authenticate.&lt;/p&gt;

&lt;p&gt;To enable authorization, first disconnect from the mongoshell and stop the mongo server (usually using ^C in the terminal will do the trick). Then access the MongoD configuration file using your favourite editor. We will use $EDITOR for the purpose of this tutorial.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo $EDITOR mongod.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might be worth mentioning that your configuration file will be by default in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/etc/&lt;/code&gt; directory. If you specified the location yourself please refer to that directory when running the command.&lt;/p&gt;

&lt;p&gt;Once in the file, navigate to the section that reads&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;security:
   authorization: &quot;disabled&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change it to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;endabled&quot;&lt;/code&gt;. Save the file and start up your mongodb server. Go back to your terminal and access the mongo client, this time adding the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mongo --authenticationDatabase -u &quot;admin&quot; -p &quot;placeholder&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also authenticate after accessing the mongo client:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mongo
&amp;gt; db.auth(&quot;admin&quot;, &quot;placeholder&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you have connected to the deployment as an admin and enabled authorization, you can now create users for whichever database they need to access. For the purposes of this article, we will assume you have a database named &lt;code class=&quot;highlighter-rouge&quot;&gt;testDB&lt;/code&gt; and would like to add the user &lt;code class=&quot;highlighter-rouge&quot;&gt;tester&lt;/code&gt;. In the client just use the following syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; use testDB
 
&amp;gt; db.createUser{
   user: &quot;tester&quot;
   pwd: &quot;default&quot;
   roles: [ { role: &quot;read&quot;, db: &quot;testDB&quot; } ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This leads us to our next point.&lt;/p&gt;

&lt;h3 id=&quot;2-authorise-users-by-role&quot;&gt;2. Authorise Users By Role&lt;/h3&gt;

&lt;p&gt;It’s not enough to turn on authentication and create an admin user. You need to create users and give them roles that are specific to their user requirements. There are 2 ways you can do this, you can either utilize &lt;a href=&quot;https://docs.mongodb.com/manual/reference/built-in-roles/&quot;&gt;MongoDB’s built-in roles&lt;/a&gt;, or you can create &lt;a href=&quot;https://docs.mongodb.com/manual/core/security-user-defined-roles/&quot;&gt;user-defined roles&lt;/a&gt; if you need users to do something specific.&lt;/p&gt;

&lt;p&gt;Don’t worry if you created a user with the wrong role, you can always update the role of the user using the method &lt;code class=&quot;highlighter-rouge&quot;&gt;db.updateUser()&lt;/code&gt;. The following is the syntax for the method (bear in mind it can also be used to update other fields for the user and not just the role so be careful):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.updateUser(
  &quot;&amp;lt;username&amp;gt;&quot;,
  {
    customData : { &amp;lt;any information&amp;gt; },
    roles : [
              { role: &quot;&amp;lt;role&amp;gt;&quot;, db: &quot;&amp;lt;database&amp;gt;&quot; } | &quot;&amp;lt;role&amp;gt;&quot;,
              ...
            ],
    pwd: &quot;&amp;lt;cleartext password&amp;gt;&quot;
   },
   writeConcern: { &amp;lt;write concern&amp;gt; }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Description Table&quot; src=&quot;https://wott.io/assets/blog/mongodb-table-45124f8e5a65f7cbd80cdf48ec859fa5d462ee25f297819cb6b25e48de2c2a21.png&quot; integrity=&quot;sha256-RRJPjlpl98vYDN9I7IWfpdRi7iXyl4GctrJeSN4sKiE=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/92987f-d1ad1b105e7377793859e774a55f1c8e5da96e362e6186cc372ec95ccafddb02.png 2x, https://wott.io/assets/887014-22bdaa02438990c10b05891d82959ddff6e10be364169c888278004cace31e3d.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An example would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.updateUser(&quot;tester&quot;,
{
   roles: [
       {role: &quot;readWrite&quot;, db: &quot;testDB}
   ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-encrypt-communication&quot;&gt;3. Encrypt Communication&lt;/h3&gt;

&lt;p&gt;By default, information sent between the mongo client and server is sent in plaintext. The implications of using such a basic method of communication can be devastating when handling sensitive data, especially if an attacker is setting up camp in your lines of communication. We recommend configuring your MongoDB deployment to support TLS/SSL. The Process to enabling TLS/SSL communication is a long one and has a lot to cover, so we recommend going through &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/configure-ssl/&quot;&gt;this page&lt;/a&gt; in the MongoDB documentaion. It does assume prior knowledge of TLS/SSL and public key infrastructure, so make sure you are brushed up on that before going through it.&lt;/p&gt;

&lt;h3 id=&quot;6-encrypt-data&quot;&gt;6. Encrypt Data&lt;/h3&gt;

&lt;p&gt;MongoDB Enterprise 3.2 comes with a WiredTiger storage engine. This engine also comes with it’s own &lt;a href=&quot;https://docs.mongodb.com/manual/core/security-encryption-at-rest/&quot;&gt;Encryption At Rest&lt;/a&gt;, which can be used to encrypt data in the storage layer.&lt;/p&gt;

&lt;p&gt;If you decide not to go with the WiredTiger’s encryption at rest, please make sure any MongoDB data is encrypted on every host using file-system, device or physical encryption. Be sure if you use any key-based encryption to store the key outside of the MongoDB deployment and somewhere that shouldn’t be easy to find.&lt;/p&gt;

&lt;h3 id=&quot;5-always-backup-your-databases&quot;&gt;5. Always Backup Your Databases&lt;/h3&gt;

&lt;p&gt;A common attack used by attackers looking to earn an easy paycheck is ransomware. Ransomware is a type of malware that either encrypts or whipes your data and threatens to never give you access to the data unless you pay the attacker through bitcoins or some other currency that is difficult to trace. To defend yourself against these attacks, it is best to ensure you keep a regular backup of your data, in the event that this attack occurs, you can simply restore your data from the most recent backup. It sounds simple enough, but it can definitely save you a lot of money as most of these ransomware encryptions use advanced cryptographic algorithms that would either cost too much to break or be almost impossible to break before then end of the Earth. Oh, and don’t forget to make sure you’re backup is encrypted, you don’t want just anybody stumbling upon it and having access to all that data.&lt;/p&gt;

&lt;h3 id=&quot;6-use-a-non-standard-port&quot;&gt;6. Use a Non-standard Port&lt;/h3&gt;

&lt;p&gt;This point is security by ambiguity, it isn’t an effective way to stop attackers, but it can certainly slow them down, as most attackers begin attacks by scanning for the standard MongoDB ports and hoping to catch someone with their shields down.&lt;/p&gt;

&lt;p&gt;The standard MongoDB ports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2700X&lt;/li&gt;
  &lt;li&gt;27017&lt;/li&gt;
  &lt;li&gt;27019&lt;/li&gt;
  &lt;li&gt;27018&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To change the default port, navigate to the &lt;strong&gt;mongod.conf&lt;/strong&gt; file and locate the lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net:
   port: 27017
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and change the port number to one that is available. When this is done, restart the server.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;MongoDB deployments have been at risk of attacks for quite some time now, the most common of them being ransomware attacks. By following this guide, we hoped to cover the more blatant flaws that are overlooked by MongoDB users and secure them. Make sure to stay vigilant when working with other people and know that no system is 100% secure.&lt;/p&gt;

&lt;p&gt;But why have to worry about going through all of these points? &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; is a developer tool to automatically run CVE scans, audit service configurations, manage your firewalls, simplify mTLS, and more. By using WoTT, we can run some checks on your MongoDB deployment and notify you of any fixes we recommend to keep your deployment safe and secure.&lt;/p&gt;</content><author><name>Mahmoud Fahmy</name></author><category term="tutorials" /><category term="tutorials" /><category term="open-source" /><summary type="html">How to Securely Configure MongoDB Required Skill Level: Intermediate Reading Time: 15-20 Minutes Introduction MongoDB is a NoSQL, document database that is widely used by companies and individuals. Its popularity and support makes it a contender for one of the best options for database needs. Unfortunately, its popularity makes it a target for experienced and mediocre attackers alike. This article will go over the most common security risks to MongoDB and how to mitigate them. Hopefully by the end of this article, your MongoDB deployment will be impervious to most attacks. We also assume that you have quite a bit of knowledge when using MongoDB as you have probably created a database and have come here looking to secure it. If you have little knowledge in MongoDB, you can continue to read this post and learn the theory behind securing your database, however we strongly recommend taking a course and learning the syntax and how MongoDB works to gain a better understanding. With that being said, let’s get into it! Side note: WoTT is a service that checks and audits your node network including MongoDB deployments. Common Risks and How to Mitigate Them 1. Authentication and Authorization By default, when MongoDB is installed, it does without needing password credentials when accessing the database. It is highly recommended that you add users with login credentials, and an admin user with elevated privelages. Before doing so, you need to enable Access Control. By enabling access control, you enforce user authentication, requiring users to identify themselves before accessing your MongoDB deployment. Assuming you have the mongodb server running, connect to the server using a terminal as the client by executing the command: $ mongo NB: You probably need to add a port-- and host-- after the mongo command depending on how you set up your deployment. Now that you are in the database as a client, you must switch to the admin database to add a new user. Simply execute the following command: $ use admin switched to db admin Now we need to create an admin user, to do so, run the following commands: db.createUser( { user: &quot;admin&quot;, pwd: &quot;placeholder&quot;, roles [{role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot;}, &quot;readWriteANyDatabase&quot;] } ) Make sure to replace placeholder with a strong password, you could alternatively use the command: passwordPrompt() This creates an admin user that has access to every aspect of any database in your deployment, so be cautious as to who you share that information with. Since MongoDB doesn’t enable authorization/authentication by default, even with the creation of an admin user, users will still have access to all aspects of every database in your deployment without the need to authenticate. To enable authorization, first disconnect from the mongoshell and stop the mongo server (usually using ^C in the terminal will do the trick). Then access the MongoD configuration file using your favourite editor. We will use $EDITOR for the purpose of this tutorial. $ sudo $EDITOR mongod.conf It might be worth mentioning that your configuration file will be by default in the &amp;lt;/etc/ directory. If you specified the location yourself please refer to that directory when running the command. Once in the file, navigate to the section that reads security: authorization: &quot;disabled&quot; Change it to &quot;endabled&quot;. Save the file and start up your mongodb server. Go back to your terminal and access the mongo client, this time adding the following: $ mongo --authenticationDatabase -u &quot;admin&quot; -p &quot;placeholder&quot; You can also authenticate after accessing the mongo client: $ mongo &amp;gt; db.auth(&quot;admin&quot;, &quot;placeholder&quot;) Now that you have connected to the deployment as an admin and enabled authorization, you can now create users for whichever database they need to access. For the purposes of this article, we will assume you have a database named testDB and would like to add the user tester. In the client just use the following syntax: &amp;gt; use testDB &amp;gt; db.createUser{ user: &quot;tester&quot; pwd: &quot;default&quot; roles: [ { role: &quot;read&quot;, db: &quot;testDB&quot; } ] } This leads us to our next point. 2. Authorise Users By Role It’s not enough to turn on authentication and create an admin user. You need to create users and give them roles that are specific to their user requirements. There are 2 ways you can do this, you can either utilize MongoDB’s built-in roles, or you can create user-defined roles if you need users to do something specific. Don’t worry if you created a user with the wrong role, you can always update the role of the user using the method db.updateUser(). The following is the syntax for the method (bear in mind it can also be used to update other fields for the user and not just the role so be careful): db.updateUser( &quot;&amp;lt;username&amp;gt;&quot;, { customData : { &amp;lt;any information&amp;gt; }, roles : [ { role: &quot;&amp;lt;role&amp;gt;&quot;, db: &quot;&amp;lt;database&amp;gt;&quot; } | &quot;&amp;lt;role&amp;gt;&quot;, ... ], pwd: &quot;&amp;lt;cleartext password&amp;gt;&quot; }, writeConcern: { &amp;lt;write concern&amp;gt; } ) An example would be: &amp;gt; db.updateUser(&quot;tester&quot;, { roles: [ {role: &quot;readWrite&quot;, db: &quot;testDB} ] }) 3. Encrypt Communication By default, information sent between the mongo client and server is sent in plaintext. The implications of using such a basic method of communication can be devastating when handling sensitive data, especially if an attacker is setting up camp in your lines of communication. We recommend configuring your MongoDB deployment to support TLS/SSL. The Process to enabling TLS/SSL communication is a long one and has a lot to cover, so we recommend going through this page in the MongoDB documentaion. It does assume prior knowledge of TLS/SSL and public key infrastructure, so make sure you are brushed up on that before going through it.</summary></entry><entry><title type="html">New Space and the Future (as well as the past) of IoT</title><link href="https://wott.io/blog/news/thoughts/2019/11/20/space-iot" rel="alternate" type="text/html" title="New Space and the Future (as well as the past) of IoT" /><published>2019-11-20T10:00:00+00:00</published><updated>2019-11-20T10:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/11/20/space-iot</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/11/20/space-iot">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In a world full of buzzwords, you’ve probably already come across the term ‘New Space.’ But, what exactly is it and why should you as developers care about it? WoTT is a security company aimed at Linux distros to secure server to receiver connections in an easy, flexible way. So where do we fit?
In simple terms, because developers are needed in all aspects of commerce; but more so, the opportunity to capitalise early on a sector that is estimated to be worth &lt;a href=&quot;https://www.nato-pa.int/download-file?filename=sites/default/files/2018-12/2018%20-%20THE%20FUTURE%20OF%20SPACE%20INDUSTRY%20-%20BOCKEL%20REPORT%20-%20173%20ESC%2018%20E%20fin.pdf&quot;&gt;1.1 trillion dollars&lt;/a&gt; by 2040 (and sitting on a comfortable 360 billion now). So much of the focus in the space sector up til now has been setting up infrastructure.&lt;/p&gt;

&lt;p&gt;And it’s not as if the space sector is an ‘alien’ endeavour for developers. In fact, in many ways space and IoT have always gone hand in hand.&lt;/p&gt;

&lt;h2 id=&quot;the-past&quot;&gt;The Past&lt;/h2&gt;

&lt;p&gt;Manned spaceflight accounts for a very small portion of the space sector as a whole and has typically been motivated by military pursuit. The most ‘popular’ space endeavour, the ISS, has only been manned by crew since 2000 (assembly beginning in 1998).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Global Space Sector&quot; src=&quot;https://wott.io/assets/blog/space-economy-d427c5e1c42ef919ce60e875aaae6a2cfa92e058ccaa625cf3b9e021c99bf526.png&quot; integrity=&quot;sha256-1CfF4cQu+RnOYOh1qq5qLPqS4FjMqmJc87ngIcmb9SY=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/765996-00cfbeac88a737ef7acfa3118ee69d054f4f98b15c34e3c53010bf78c638c8b2.png 2x, https://wott.io/assets/27fc55-09b54eb9300d23f501f478930dde30f4baab2233549500c4becfe3b1df212dde.png 1x&quot; /&gt;
&lt;em&gt;in this image, you can consider manned spaceflight as a part of ‘launch’, graph found &lt;a href=&quot;https://www.sia.org/wp-content/uploads/2019/05/2019-SSIR-2-Page-20190507.pdf&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Generally, most experiments related to space are done remotely. Many of the experiments present on the ISS contain data that needs to be broadcasted to Earth.
In short, many of these experiments; which also need to be relatively low power, can be considered analagous to IoT problems. The parallels have always been there. As the use of internet as a medium for transferring data in the space domain grows, so too will the need for security. Companies like WoTT can help broach that gap.&lt;/p&gt;

&lt;h2 id=&quot;the-now&quot;&gt;The Now&lt;/h2&gt;

&lt;p&gt;We’ve since moved on from the days of the Space Race and the military era to where we are currently: a more exciting commerical branch of the sector, New Space. It’s here where prospective developers can really shine with many commercial start ups looking to outsource several components (such as security).&lt;/p&gt;

&lt;p&gt;We now have the opportunity to interface with projects in space; and not all of them are scientific. There are currently &lt;a href=&quot;https://www.esa.int/Science_Exploration/Human_and_Robotic_Exploration/Research/ICE_Cubes_space_research_service_open_for_business&quot;&gt;3 projects&lt;/a&gt; onboard the ISS done in collaboration with ESA and the International Space University (ISU); one of which is an art project (a potential area of commerical growth). Users on Earth can interface and interact with this in near real-time. These projects are set up by the onboard astronauts and essentially left to their own devices. Their data gets broadcast to Earth via the internet much like an IoT device. It’s natural to assume more projects like the ICE cubes will become more prominent in the future. As this sector increases, so does its vulnerability; and as we know IoT on Earth is already a poorly secured domain. Remember the &lt;a href=&quot;https://www.pentestpartners.com/security-blog/hacking-ruining-the-samsung-smart-fridge/&quot;&gt;Samsung fridges&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;We often take cybersecurity for granted in the developer world, but it’s often not even considered by the everyday person; even in scientfic roles. How many of these experiments for example contain &lt;a href=&quot;https://wott.ioblog/tutorials/2019/11/04/cve&quot;&gt;common vulnerabilities&lt;/a&gt; (which we here at WoTT can help you detect) in their hardware? The demand for workers with a technical background in the space sector is increasing along with these risks.&lt;/p&gt;

&lt;p&gt;Additionally, IoT itself on Earth is expanding at an exponential rate and we simply don’t have the infrastructure to support it. There are growing talks in implementing LEO (Low Earth Orbit) satellite constellations as a means of supplying low-latency internet everywhere. This is particularly relevant with the increase of prioritisation of smart cities globally. Satellites can reach corners of the globe that conventional internet supplying methods just can’t. &lt;a href=&quot;https://cordis.europa.eu/project/rcn/207924/brief/en&quot;&gt;IoTEE&lt;/a&gt; is an EU funded project concerned with providing such services to IoT devices specifically, and it is going to be tested on the ISS.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;It may still seem as though IoT is a reach for space and that thinking about investing your energy as a developer in the space sector would be detrimental. But consider that &lt;a href=&quot;https://internetofbusiness.com/nasa-iot-space-wireless/&quot;&gt;NASA itself&lt;/a&gt; is investing in wireless technologies in space through in collaboration with US M2M companies. ESA has invested nearly &lt;em&gt;half&lt;/em&gt; of its 2019 budget on technological and satellite based development.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ESA's budget for 2019&quot; src=&quot;https://wott.io/assets/blog/esa-budget-2019-e280b5d2857f019143a1ead94557dbdd51e7b8d6b2dedf690cdeafb04e29eb57.jpg&quot; integrity=&quot;sha256-4oC10oV/AZFDoerZRVfb3VHnuNay3t9pDN6vsE4p61c=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/44deb9-4c3b2da03f745d013d64a0db6aeed4db836bdae6d4ab09112e3ae1eeead6496d.jpg 2x, https://wott.io/assets/edfc95-dd3ca277b4f023e8fcf535600fb7c34e6c5efed07386debaec1410c276e81363.jpg 1x&quot; /&gt;
&lt;em&gt;ESA’s budget split up by domain. Earth Observation is a domain that is strongly influenced by the technical domain with AI specialists dominating the field. Taken from &lt;a href=&quot;http://www.esa.int/About_Us/Corporate_news/Funding&quot;&gt;ESA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In September of this year, SemTech announced a non-GPS based &lt;a href=&quot;https://www.semtech.com/company/press/semtech-and-alibaba-cloud-prevent-asset-loss-and-theft-with-lora-based-tracker&quot;&gt;location tracking service&lt;/a&gt; enabled by IoT, a huge step forward in integrating modern IoT with the satellite industry. Alibaba Cloud itself is the third largest cloud service provider globally, and the largest in China.&lt;/p&gt;

&lt;p&gt;So not only are we in a position where IoT is relevant, we are in an era where it is becoming an &lt;em&gt;increasing&lt;/em&gt; sector of demand both on Earth &lt;em&gt;and&lt;/em&gt; in space. AWS are currently working in collaboration with Iridium (a company specialising in worldwide data communication via its 66 satellite constellation) to develop &lt;a href=&quot;http://investor.iridium.com/2018-09-27-Iridium-to-Simplify-Adoption-of-IoT-Solutions-Beyond-Cellular-Coverage-with-Amazon-Web-Services&quot;&gt;Iridium CloudConnect&lt;/a&gt;. When it launches (planned for this year), it will be the first of its kind, offering truly global coverage for IoT applications and expanding AWS services across the 80% of the world it cannot currently reach.&lt;/p&gt;

&lt;p&gt;IoT started at a ‘mere’ 15.4 billion devices in 2015 and is &lt;a href=&quot;https://news.ihsmarkit.com/press-release/technology/tech-companies-creating-strategic-platforms-support-internet-things-ihs-say&quot;&gt;expected to grow&lt;/a&gt; to 75.4 billion by 2025.&lt;/p&gt;

&lt;p&gt;Space IoT is still somewhat a blue ocean market, so the time to capitalise is now. Even since the annoucnement of Iridium CloudConnect, &lt;a href=&quot;https://www.networkworld.com/article/3343059/iot-roundup-outer-space-the-building-is-getting-smart-and-trucking.html&quot;&gt;similar startups&lt;/a&gt; have already formed. As this sector expands, so does its risks; and it’s prudent for the savvy developer to forsee problems before they happen. The ease of access to IoT will only increase, and security should be on the forefront of every developer’s mind entering this industry. So far we’ve seen several proposed networks for services to connect to and not much in the way of security. A lightweight agent such as WoTT’s (which is ideal for small hardware such as Pis) is an ideal place to start closing the gap.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="open-source" /><summary type="html">Introduction</summary></entry><entry><title type="html">How to Do a CVE Scan of Your Linux System</title><link href="https://wott.io/blog/tutorials/2019/11/04/cve" rel="alternate" type="text/html" title="How to Do a CVE Scan of Your Linux System" /><published>2019-11-04T14:00:00+00:00</published><updated>2019-11-04T14:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/11/04/cve</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/11/04/cve">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Common Vulnerabilities and Exposures (&lt;a href=&quot;https://cve.mitre.org/cve/&quot;&gt;CVE&lt;/a&gt;) is a list of publicly known cybersecurity vulnerabilities. Each vulnerability is given a unique CVE number by which it can be identified and referenced. The list can be easily accessed for free online, but wouldn’t it be nice to be automatically notified when you are affected by a newly reported vulnerability without having to check the list every day?&lt;/p&gt;

&lt;p&gt;WoTT can help you do this by scanning your system packages and checking them against the CVE list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: None/Beginner&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Complete&lt;/strong&gt;: 15 - 45 minutes (depending on whether you are already set up with WoTT)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have the WoTT agent installed (or &lt;a href=&quot;#wott&quot;&gt;install it&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Have a profile with WoTT (instructions included in set up)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a few simple steps, you can determine your vulnerability score. Follow the instructions below.&lt;/p&gt;

&lt;h2 id=&quot;-1-install-the-wott-agent&quot;&gt;&lt;a name=&quot;wott&quot;&gt;&lt;/a&gt; 1. Install the WoTT agent&lt;/h2&gt;

&lt;p&gt;You’ll need to install our lightweight agent if you haven’t done so already. See our &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;getting started&lt;/a&gt; page and follow the instructions.&lt;/p&gt;

&lt;h2 id=&quot;2-review-cve-scan-results&quot;&gt;2. Review CVE scan results&lt;/h2&gt;

&lt;p&gt;If you’re already set up with WoTT, you’ll need to navigate and log in to the &lt;a href=&quot;https://dash.wott.io&quot;&gt;WoTT Dash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now click on the ‘Device Name’ to see device details. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;sample dashboard&quot; src=&quot;https://wott.io/assets/blog/al-dash-977c4403c36d5606d3f46c66890c09343962906def456281e30ac838810761ed.png&quot; integrity=&quot;sha256-l3xEA8NtVgbT9GxmiQwJNDlikG3vRWKB4wrIOIEHYe0=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/546b19-f7dc0a3ff6841cf34362fd6ef0437065a2172e211304ca17d8f02a2fbb743e88.png 2x, https://wott.io/assets/cb07c6-f065a1f71c7ecb636108e9a43e8e4bdfcbb223fff7b0aef6aaa18465c4963c7b.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see your vulnerabilities, navigate to the security tab at the top of the page where a scan of your device will be performed.
Here you will see a list of all CVEs that affect your endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;sample CVE &quot; src=&quot;https://wott.io/assets/blog/al-device-b5c9d079c5c54a98b1184384be1d3e33638df525edc15a019717fd93bdf939f8.png&quot; integrity=&quot;sha256-tcnQecXFSpixGEOEvh0+M2ON9SXtwVoBlxf9k735Ofg=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/b3ea79-61bbd33a2680cbc6e82ad40725e1967acf62b299a155c3ee29055bff9b546deb.png 2x, https://wott.io/assets/e84a38-edd425d5c1bb52318d8fb1d9490647ebf4cdf419992de5195f7abee9200ee638.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this particular example, you can see that the scan has detected default login credentials (such as those on a raspberry pi). The results will of course vary depending on your device, but this should give you a better understanding on the common vulnerabilities present on your device that can be easily exploited.&lt;/p&gt;

&lt;h2 id=&quot;additional-information-and-closing-notes&quot;&gt;Additional Information and Closing Notes&lt;/h2&gt;

&lt;p&gt;WoTT also provides a more holistic security audit and set of developers tools to capture and correct other common failure points such as &lt;a href=&quot;https://wott.io/documentation/faq#firewall-policy&quot;&gt;firewall policy&lt;/a&gt;, OpenSSH audits and the presence of app hardening tools like &lt;a href=&quot;https://wott.io/documentation/faq#apparmor&quot;&gt;AppArmor&lt;/a&gt; and &lt;a href=&quot;https://wott.io/documentation/faq#selinux&quot;&gt;SELinux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To understand each check in the security audit visit the WoTT &lt;a href=&quot;https://wott.io/documentation/faq&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;</content><author><name>Al Esmail</name></author><category term="tutorials" /><category term="open-source" /><summary type="html">Introduction</summary></entry><entry><title type="html">How to Audit OpenSSH Configuration and Secure It</title><link href="https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security" rel="alternate" type="text/html" title="How to Audit OpenSSH Configuration and Secure It" /><published>2019-10-25T17:00:00+00:00</published><updated>2019-10-25T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/10/25/audit-openssh-security">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Beginner to Medium&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading Time&lt;/strong&gt;: 15-20 Minutes&lt;/p&gt;

&lt;p&gt;In this post, we will review the fundamentals of a secure OpenSSH server. As you probably know the SSH (Secure Shell) is a method to remote login to a server. SSH is usually secure however if used with the default settings, can be vulnerable to attacks from unwanted parties.&lt;/p&gt;

&lt;p&gt;We will look at the basics of auditing and securing your OpenSSH configuration file, to make sure that only trusted users can remote login to your server, and are privy to the information they are permitted to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Linux distribution (this guide should be good for most distro’s)&lt;/li&gt;
  &lt;li&gt;The config file (usually located at /etc/ssh/ssh_config)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can open this file from the terminal using the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo $EDITOR /etc/ssh/ssh_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;We also want to quickly mention that our service &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; audits the security of your linux machine/s including your OpenSSH configuration. It is free for up to 5 nodes and contains many guides and documentation to make sure setting up is simple and painless whilst easing your mind on the strenuous work that is securing your system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are a few key features to check if your OpenSSH server is secure:&lt;/p&gt;

&lt;h2 id=&quot;1-use-strong-passwords&quot;&gt;1. Use Strong Passwords&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/password_strength.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This might seem like an obvious one, but a lot of systems are vulnerable to brute force attacks or simple guesswork due to having easy to guess passwords or generic passwords. By ensuring that your password/s is complex and long, it makes it a lot more difficult and more time consuming to brute force (can result in you noticing the attack) if the password has capital letters, special characters and numbers. Also make sure to use a non-conspicuous word or phrase as your base. Something like idontlikemeltedicecream rather than your first car or the name of your pet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: we strongly recommend you don’t use passwords to begin with (see point 5). But we understand that some people would like to keep using passwords so we’ll keep this up here.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-change-the-default-ssh-port&quot;&gt;2. Change the Default SSH Port&lt;/h2&gt;

&lt;p&gt;By default, any SSH port is 22. This makes it so that anyone connecting to your SSH server can find it simply by connecting to the default port. Changing the port makes it more difficult to find and slows down the attacker’s process significantly. To change it, navigate to the config file as shown above and open it in your terminal (you can also edit it through a text editor although this guide will show you how to do so in a terminal).&lt;/p&gt;

&lt;p&gt;Once you have the config file open, locate the line that says Port 22, and change the number to a port that is not in use on your server yet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can check to see which ports are not in use by running the following command on another terminal:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ netstat -ntap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;This command will show you a long list of ports and connections that are open.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-use-protocol-2&quot;&gt;3. Use Protocol 2&lt;/h2&gt;

&lt;p&gt;Again this is a simple one but can be overlooked. There are two protocol versions SSH uses, by default it should be set to 2, but be sure to check that version 2 is being used. For more information on why protocol 2 should be used instead of 1, &lt;a href=&quot;http://www.snailbook.com/faq/ssh-1-vs-2.auto.html&quot;&gt;please refer to this webpage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-disable-root-login&quot;&gt;4. Disable Root Login&lt;/h2&gt;

&lt;p&gt;This one is interesting because it is a use-by-case recommendation. We highly recommend disabiling root login, because a common attack is to brute force against the name of the root superuser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please Note&lt;/strong&gt;: If you do plan on disabling Root Login, please test the SSH login with your non-root user that you plan to use for SSH logins &lt;strong&gt;before&lt;/strong&gt; you disable the root account. If you don’t, you may be stuck without a way to access your server through SSH.&lt;/p&gt;

&lt;p&gt;To disable root login, navigate to the config file, locate the “PermitRootLogin” and change that to “no”. This will make it so that you cannot login with the root user anymore.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-use-key-based-authentication&quot;&gt;5. Use Key-based Authentication&lt;/h2&gt;

&lt;p&gt;Key-based Authentication (aka Public key authentication), are a much more secure way of authenticating users as they are much less prone to brute force attacks. To enable key-based authentication, you must disable password authentication, this will leave your users with no choice but to use keys.&lt;/p&gt;

&lt;p&gt;Look for these settings and apply the following changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PubkeyAuthentication yes
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information on key-based authentication and a more detailed guide on setting up keys, please refer to &lt;a href=&quot;https://linux-audit.com/using-ssh-keys-instead-of-passwords/&quot;&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;h2 id=&quot;6-check-integrity-of-user-database&quot;&gt;6. Check Integrity of User Database&lt;/h2&gt;

&lt;p&gt;You’ve probably added users to the config file to allow trusted people to access your server. Make sure that there are no old users that have access to your server if they shouldn’t. Again, maybe a bit obvious but can be overlooked.&lt;/p&gt;

&lt;h2 id=&quot;7-disable-agent-agentforwarding&quot;&gt;7. Disable Agent AgentForwarding&lt;/h2&gt;

&lt;p&gt;This is another example of something that is a use-by-case scenario. Since it allows connections outside of your server whilst leaving a socket open on the local machine, anyone with sufficient permissions can connect to and use your local ssh-agent. Unless you’re using something like a jump/bastion server, it is unlikely that you need this. For more information, please refer to this article &lt;a href=&quot;https://heipei.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To disable agent AgentForwarding, navigate to the following setting in the config file and apply the changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowAgentForwarding no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8-use-of-a-bastion-host&quot;&gt;8. Use of a Bastion Host&lt;/h2&gt;

&lt;p&gt;A bastion host is a special purpose computer on a network with the purpose of withstanding attacks. They usually host a single application (for example a proxy server) and all other services are removed or limited to reduce the threats on the network through the computer. This means that you can disable public SSH access to all other nodes, and you would have to go through the bastion host to access any other node.&lt;/p&gt;

&lt;p&gt;Having a bastion host can act as perimeter to reduce the attack surface of your network. To set one up, we recommend going through &lt;a href=&quot;https://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/&quot;&gt;this extensive guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;9-limit-users-logging-in-over-ssh&quot;&gt;9. Limit Users Logging in over SSH&lt;/h2&gt;

&lt;p&gt;Limiting which users can login over SSH can save you from worrying who’s able to login and who isn’t. This point is bouncing off of point 6. To allow certain users, we will assume you want only users “Gecko” and “Marko” to login over SSH. Navigate to the SSH config file and add the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowUsers Gecko Marko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many other ways you can secure your OpenSSH configuration, we have outlined the glaring flaws that quite a few developers and admins overlook. We do recommend reading through the config file and checking what can be changed thoroughly as even the small mistakes can result in an attack on your server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; is a developer tool to automatically run CVE scans, audit service configurations, manage your firewalls, simplify mTLS, and more. By using this tool to scan your OpenSSH config, you can cut through the hassle of looking for similar guides online or reading through your config files to make sure everything is as secure as it can be.&lt;/p&gt;</content><author><name>Mahmoud Fahmy</name></author><category term="tutorials" /><category term="tutorials" /><summary type="html">Introduction</summary></entry><entry><title type="html">What is SELinux and Why You Might Want It</title><link href="https://wott.io/blog/tutorials/2019/10/15/what-is-selinux" rel="alternate" type="text/html" title="What is SELinux and Why You Might Want It" /><published>2019-10-15T17:00:00+00:00</published><updated>2019-10-15T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/10/15/what-is-selinux</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/10/15/what-is-selinux">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today we’re going to talk about SELinux - Security Enhanced Linux. For the everyday layman SELinux maybe daunting to setup, but is a good introduction into different ways to manage access control to your systems. More and more we give companies our precious data and the onus should be placed on developers to protect this data with growing cybersecurity threats. So we’re going to show you how to implement SELinux for the security-conscious developer (and talk a little on AppArmor).&lt;/p&gt;

&lt;p&gt;Proceed with caution though - SELinux and AppArmor are MAC protocols (more on that later) and you run the risk of locking yourself out of your own system. If you’re interested in learning a bit more about SELinux and MAC protocols, read on below. If you just want to jump straight into the bare-bones edition, skip straight ahead to the &lt;a href=&quot;#tutorial&quot;&gt;tutorial&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Medium&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Complete&lt;/strong&gt;: 30 minutes - 1 hour&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Either:
    &lt;ul&gt;
      &lt;li&gt;have SELinux installed&lt;/li&gt;
      &lt;li&gt;use a Red Hat distribution of Linux&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;follow guide to install SELinux for Debian based Linux (Debian, Ubuntu, etc) using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; package&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;have a virtual machine with your Linux distribution installed&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;an understanding on MAC protocols (will make the tutorial easier) we give a brief introduction if you are not familiar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But &lt;em&gt;please&lt;/em&gt; test this out first on a VM to get familiar with MAC protocols as we do not want you locked out of your system.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-selinux-and-what-is-a-mac-model&quot;&gt;So what is SELinux and what is a MAC Model?&lt;/h2&gt;

&lt;p&gt;SELinux is a US National Security Agency project aimed at improving security in the Linux kernel (more specifically, kernel 2.6.x). You will already be familiar with Discretionary Access Control as it is the system employed by most consumer Operating Systems. File permissions are determined by the creator/user, in Linux this is the ‘Access Control List’ - think about times where you have used &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to assign read or write permissions.&lt;/p&gt;

&lt;p&gt;Mandatory Access Control, or MAC (not to be confused with Media Access Control) is different. Basically, the &lt;em&gt;operating system&lt;/em&gt; determines access based on a security label (rules for access can be managed by a security officer- usually a single system administrator), not the user that created the file. For Linux, this system exists as SELinux.&lt;/p&gt;

&lt;p&gt;The control is taken away from the user?! Why on Earth would you want that?! Many organisations deal with sensitive data like military or government. Within a military organisation, some information is reserved for specific individuals with associated security labels (need to know, top secret, etc;).&lt;/p&gt;

&lt;p&gt;But beyond that, we tend to entrust our data to many corporations which we don’t want everyone seeing. As a result, enterprise oriented Linux systems, like RedHat Enterprise Linux (RHEL) automatically have SELinux pre-installed. Familiarising yourself with it is absolutely the way to go.&lt;/p&gt;

&lt;p&gt;Think of it this way: let’s say you work for a hospital; you want to manage records of patients. Typically there are a few trusted individuals who have explicit access to these records (to update them, or manage them), but it is the governing board of regulations or the company itself that dictates how this information is shared. Of course, in a hospital, patient records should be confidential and strictly between patient and doctor. You may want another doctor to access your records, but you wouldn’t want your employer or other hospital admin to.&lt;/p&gt;

&lt;p&gt;In other words, there is a hierarchy that defines who has access to certain resources and information. At an organisation level, this is set by regulations. These regulations dictate MAC access.&lt;/p&gt;

&lt;h2 id=&quot;--setting-up-selinux-for-yourself&quot;&gt;&lt;a name=&quot;tutorial&quot;&gt; &lt;/a&gt; Setting up SELinux for yourself&lt;/h2&gt;

&lt;p&gt;SELinux is milder than most MAC models and a good introduction into implementing MAC for your own security. In SELinux, the system administrator is the security officer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are Linux distributions that have SELinux preinstalled, such as RedHat Enterprise Linux (RHEL) and CentOS.&lt;/p&gt;

&lt;p&gt;It’s useful to have SELinux on your servers as it protects your server from malicious or flawed programs. The ‘strength’ of SELinux is at the discretion of the system administrator. It comes in 3 modes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disabled&lt;/li&gt;
  &lt;li&gt;Permissive&lt;/li&gt;
  &lt;li&gt;Enforcing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permissive prints system warnings but does not enforce the protocol (useful for testing).&lt;/p&gt;

&lt;h2 id=&quot;setting-up-on-ubuntudebian&quot;&gt;Setting Up on Ubuntu/Debian&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Install SELinux&quot; src=&quot;https://wott.io/assets/blog/selinux-install-72f65214b02923c21821d6911cbdf60173e581ee34cb73c2e928f6c96928b149.png&quot; integrity=&quot;sha256-cvZSFLApI8IYIdaRHL32AXPlge40y3PC6Sj2yWkosUk=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/a5153f-2e1c44c359efac955e7b2dade636ff78d77984f704df4837abb317b35e908036.png 2x, https://wott.io/assets/be60c1-802e2af2c0ab5be32052299514e503d9332f4bca37b50b24c608c5537c88e04c.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On Ubuntu or Debian, you need to install the required packages by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get install selinux-basics selinux-policy-default auditd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re using Ubuntu, download &lt;a href=&quot;https://wiki.debian.org/SELinux/Setup?action=AttachFile&amp;amp;do=view&amp;amp;target=_load_selinux_policy&quot;&gt;this&lt;/a&gt; taken from the Debian Wiki. Copy it into: &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/initramfs-tools/scripts/init-bottom/&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;update-initramfs -u &lt;/code&gt; in your terminal session.&lt;/p&gt;

&lt;p&gt;Once done, you can check SELinux is installed/running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# getenforce
Disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SELinux is installed but not running, you will need to activate and reboot:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# selinux-activate
# reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should put SELinux into Permissive mode. To check, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sestatus&lt;/code&gt; and you should get the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             default
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setting-modes&quot;&gt;Setting Modes&lt;/h2&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# audit2why -al
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will return would-be blocked operations since your last boot. It is tedious but worth going through as SELinux has many reported bugs. We would suggest going through each bug one-by-one and follow &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security-enhanced_linux/sect-security-enhanced_linux-fixing_problems-allowing_access_audit2allow&quot;&gt;this Red Hat guide&lt;/a&gt; for changing access using the &lt;code class=&quot;highlighter-rouge&quot;&gt;audit2allow&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you are not confident, &lt;strong&gt;we strongly suggest testing this on a virtual machine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can now change the mode to enforcing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to test, run: &lt;code class=&quot;highlighter-rouge&quot;&gt;setenforce = 1&lt;/code&gt; in your terminal&lt;/li&gt;
  &lt;li&gt;or if you are confident, add &lt;code class=&quot;highlighter-rouge&quot;&gt;enforcing = 1&lt;/code&gt; to the kernel command line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/default/grub&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then reboot as earlier. You will now be running SELinux’s default policy. To change this, simply manoeuvre back to the root user and set it back to permissive via &lt;code class=&quot;highlighter-rouge&quot;&gt;setenforce = 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Provided you have access to the root user, you can feel free to play around with SELinux’s &lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/changing-selinux-states-and-modes/&quot;&gt;other policies&lt;/a&gt; until you are comfortable.&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing Up&lt;/h2&gt;

&lt;p&gt;And that concludes our intro to SELinux. Play around with policies until you are comfortable, then you can ship SELinux to your own servers with confidence. SELinux essentially acts as a sandbox protecting your information from fradulent or corrupted access by external programs or daemons. As for AppArmor, it’s just another MAC protocol that’s used particularly for Ubuntu. It’s easier to use as it deals with pathing rules; but SELinux is widely considered the more secure of the two. SELinux is better for those who are very familiar with Unix based systems, but AppArmor is another great introduction to MAC.&lt;/p&gt;

&lt;p&gt;SELinux is a great way to implement security, but it is known for its bugs and disruptive mechanisms. Actual sandboxing is another alternative to protecting your kernel.&lt;/p&gt;

&lt;p&gt;Good work getting to the end of this tutorial. You have taken a big step in securing your Linux environment. There are additional steps you can take to improve security posture like CVE scanning, firewall management and service configuration. WoTT can help you do that with a lightweight agent that scans for vulnerabilities and provides clear recommended actions to fix those issues. Get started &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="tutorials" /><summary type="html">Introduction</summary></entry><entry><title type="html">Security audit checklist for linux systems</title><link href="https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems" rel="alternate" type="text/html" title="Security audit checklist for linux systems" /><published>2019-10-04T10:00:00+00:00</published><updated>2019-10-04T10:00:00+00:00</updated><id>https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems</id><content type="html" xml:base="https://wott.io/blog/thoughts/2019/10/04/security-audit-checklist-for-linux-systems">&lt;p&gt;We so often hear from developers that they don’t need to worry about cyber security because they’re too small to be targeted or because they trust their service providers to take care of it for them. Sound like someone you know? Well, let’s start with a quick synopsis of recent cloud failures that were not targeted attacks and where service providers weren’t a silver bullet.  Each of these examples were simply failures in security hygiene.&lt;/p&gt;

&lt;h2 id=&quot;security-fails&quot;&gt;Security Fails&lt;/h2&gt;

&lt;h3 id=&quot;facebook&quot;&gt;Facebook&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; 2019&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; Cultura Colectiva (a 3rd party user of Facebook data) exposed 500 million customer phone numbers&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; AWS server was configured to be public facing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://www.cbsnews.com/news/millions-facebook-user-records-exposed-amazon-cloud-server/&quot;&gt;CBS News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; Ongoing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; 52,000 databases searchable through &lt;a href=&quot;shodan.io&quot;&gt;Shodan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; If MongoDB is installed with default server settings, it allows anyone to browse, download, edit or delete data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://krebsonsecurity.com/tag/mongodb/&quot;&gt;KrebsOnSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;capital-one&quot;&gt;Capital One&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; 2019&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security Fail:&lt;/strong&gt; 100 million records including bank details and social security&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; Misconfigured web application firewall (WAF) in AWS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://krebsonsecurity.com/tag/capital-one-breach/&quot;&gt;KrebsOnSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;medical-facilities&quot;&gt;Medical facilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Year:&lt;/strong&gt; Ongoing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fail:&lt;/strong&gt; 187 servers with x-ray and medical data open to public. &amp;gt;1m records with medical procedures, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cause:&lt;/strong&gt; Medical data exposed to the public internet without requiring authentication&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://www.propublica.org/article/millions-of-americans-medical-images-and-data-are-available-on-the-internet&quot;&gt;ProPublica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-security-audit-checklist&quot;&gt;Linux security audit checklist&lt;/h2&gt;

&lt;p&gt;Still think you’re above the fray? Well maybe you are, so the checklist below will just be reassurance that you and your team have already done everything you need to do. Let’s dig in  with this set of 5 security practices that can get you going in the right direction.&lt;/p&gt;

&lt;h3 id=&quot;1-cve-scanner&quot;&gt;1. CVE scanner&lt;/h3&gt;

&lt;p&gt;The CVE databases are great but, but are you monitoring your system for known vulnerable packages? Most developers will setup a server and then perhaps just periodically update it a few times a year, leaving the server(s) vulnerable for an extended period of time.&lt;/p&gt;

&lt;p&gt;CVE scanners solve this problem by checking the system packages in your operating system against the database and flagging packages that need an update.&lt;/p&gt;

&lt;h3 id=&quot;2-services-audit&quot;&gt;2. Services audit&lt;/h3&gt;

&lt;p&gt;SSH is meant to be secure and is secure when it is configured correctly. Unfortunately, an error configuring SSH can mean that an attacker can apply a brute-force attack against your node(s). Root access, passwordless login, timeout intervals and updates are all points that need to be managed correctly.&lt;/p&gt;

&lt;p&gt;The same is true for any service accessing your server. It’s important to regularly audit your services for threats and vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;3-mtls-mutual-tls-for-authentication&quot;&gt;3. mTLS (mutual TLS) for authentication&lt;/h3&gt;

&lt;p&gt;mTLS solves two problems: password management and client side authentication. There are great tools out there for secrets  management like &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault by Hashicorp&lt;/a&gt;. However, even more sophisticated than passwords and API keys is using TLS certificates for both client and server authentication.&lt;/p&gt;

&lt;p&gt;The difficulty here is in setting up your own CA. &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; can be used but it is generally not advisable to use a public CA for your internal infrastructure. There are some reliable private CAs as a service like &lt;a href=&quot;https://www.wott.io&quot;&gt;WoTT&lt;/a&gt; that can support your needs.&lt;/p&gt;

&lt;h3 id=&quot;4-firewall-configuration&quot;&gt;4. Firewall configuration&lt;/h3&gt;

&lt;p&gt;Firewall configurations seem fairly trivial, yet so often this is the source of massive breaches at large companies (see above Facebook fail). Tracking and managing the appropriate access to servers can be incredibly difficult at scale.&lt;/p&gt;

&lt;h3 id=&quot;5-selinux-and-apparmor&quot;&gt;5. SELinux and AppArmor&lt;/h3&gt;

&lt;p&gt;Security Enhanced Linux (SELinux) and AppArmor are Linux kernel security modules that support access control policies and include mandatory access controls. Enabling these tools is a rigorous process but provides hardening at the application level.&lt;/p&gt;

&lt;p&gt;SELinux is more sophisticated in its settings but consequently presents more pitfalls to the developer since more decisions need to be made. AppArmor provides similar functionality but requires less customization.&lt;/p&gt;

&lt;h2 id=&quot;automate-cyber-security-checks&quot;&gt;Automate cyber security checks&lt;/h2&gt;

&lt;p&gt;So you know what you need to do but that’s only part of the problem. The bigger part of the problem seems to be making sure these things actually get prioritized and handled consistently. We have a few tips for making that happen.&lt;/p&gt;

&lt;h3 id=&quot;behavior&quot;&gt;Behavior&lt;/h3&gt;

&lt;p&gt;Agile development is too dynamic for retroactive security audits. Build security practice into your team processes and make it part of your DNA. Security does not belong in the hands of a single team, it should be part of a mindset and a culture at the organization level.&lt;/p&gt;

&lt;h3 id=&quot;measure-it-to-manage-it&quot;&gt;Measure it to manage it&lt;/h3&gt;

&lt;p&gt;Create metrics to measure the security dimension and manage performance accordingly. Behavior is nurtured through culture, metrics and rewards. Find ways to attribute numbers to security posture of the individual, the team, the asset and reward your people for making improvements.&lt;/p&gt;

&lt;h3 id=&quot;devsecops-is-taking-over&quot;&gt;DevSecOps is taking over.&lt;/h3&gt;

&lt;p&gt;Integrate security tools into your tool chain. Companies like &lt;a href=&quot;snyk.io&quot;&gt;Snyk &lt;/a&gt; have done an excellent job of auditing dependencies and providing developers with real time feedback.  The &lt;a href=&quot;https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf&quot;&gt;NIST&lt;/a&gt; states that it is at least 10x cheaper to implement security before code is committed. It’s also faster to get things right the first time than to use up product and developer time on bug fixes that are retroactively identified by a security team.&lt;/p&gt;

&lt;p&gt;Consider a tool like &lt;a href=&quot;www.wott.io&quot;&gt;WoTT&lt;/a&gt; to monitor, measure and provide actions to improve security.&lt;/p&gt;</content><author><name>Al Esmail</name></author><category term="thoughts" /><category term="open-source" /><summary type="html">We so often hear from developers that they don’t need to worry about cyber security because they’re too small to be targeted or because they trust their service providers to take care of it for them. Sound like someone you know? Well, let’s start with a quick synopsis of recent cloud failures that were not targeted attacks and where service providers weren’t a silver bullet. Each of these examples were simply failures in security hygiene.</summary></entry><entry><title type="html">The significance of mTLS and why you should care about it</title><link href="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls" rel="alternate" type="text/html" title="The significance of mTLS and why you should care about it" /><published>2019-09-09T08:00:00+00:00</published><updated>2019-09-09T08:00:00+00:00</updated><id>https://wott.io/blog/thoughts/2019/09/09/what-is-mtls</id><content type="html" xml:base="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.&lt;/p&gt;

&lt;h2 id=&quot;what-is-mtls&quot;&gt;What is mTLS?&lt;/h2&gt;
&lt;p&gt;mTLS  is a protocol that verifies the cryptographic identity of both endpoints before initiating communication, rather than just one. This cryptographic verification ensures that your messages and your connection are private, by ensuring that your device’s identity is authenticated and thus, trustworthy. mTLS is a two-way authentication, hence, the m which stands for mutual. Mutual transport layer security means that the two parties, the client and the server, authenticate each other at the same time. Some of the most popular and innovative technology companies out there use mTLS, including Google. Mutual TLS is state-of-the-art security contributing to building a robust security posture. To implement mTLS for IoT, one must set up a secure Public Key Infrastructure (PKI).  PKI is a useful set of security tools and processes needed to manage certificates. Everything related to the provision, management, distribution and revocation of certificates lies in the PKI.&lt;/p&gt;

&lt;h2 id=&quot;why-is-mtls-authentication-important&quot;&gt;Why is mTLS authentication important?&lt;/h2&gt;
&lt;p&gt;IoT security rests on the proper management of machine identities. But, machine identities can be efficiently managed with the use of digital certificates and mTLS. mTLS authentication validates the trust between your device and your server by simultaneously identifying each other as authentic. That is a proper way for connection and data transmission to be established. If the initial validation process fails, access is denied and a connection is not made.&lt;/p&gt;

&lt;h2 id=&quot;what-can-go-wrong-if-you-do-not-use-mtls&quot;&gt;What can go wrong if you do not use mTLS?&lt;/h2&gt;
&lt;p&gt;Not using mTLS may compromise your brand, your company, and your services in a multitude of ways. Consider a scenario where hackers compromise your device and use a commonly shared API key stored on disk to gain access to your back-end servers. This means that any sensitive information stored on your server might become accessible. Without mutual authentication there is no way to confirm client-side identity and isolate the compromised device. Imagine again, the occasion where without mTLS hackers take over a device and start sending falsified data. The data received and transmitted is altered, compromised and unreliable. But the users have no way of knowing this and they keep making critical decisions based on the compromised data received. They analyze metrics, they receive real-time data but…the integrity of the data is compromised so nothing can be trusted. What if the data compromised is related to health and smart healthcare devices? Or if it’s logistics-related data or even manufacturing and smart transportation data? What kind of a cataclysmic or disastrous impact will compromised data have? This is why in IoT infrastructure mTLS is an important piece of the security puzzle. IoT security is all about authenticating, trusting and securing the services provided.&lt;/p&gt;

&lt;h2 id=&quot;how-can-this-affect-you-and-your-company&quot;&gt;How can this affect you and your company?&lt;/h2&gt;
&lt;p&gt;For companies, the financial implications of security breaches are tremendous and difficult to recover from. It is not only the brand’s reputation plummeting but it is also the loss of customers and most importantly the huge fines incurred. The brand’s reliability is questioned and trust is lost.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;Machine identity is a critical element of a robust security system for IoT.  Issuing x509 certificates to devices (and rotating them) provides cryptographically verifiable identities that can be used in mutual authentication through mTLS. This limits the chances of adversaries compromising your devices and keeps their hands off your credentials or confidential data. mTLS is a powerful way to enhance security posture, and ensure that your company is taking the necessary precautions to prevent a breach.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="thoughts" /><category term="open-source" /><summary type="html">Introduction Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.</summary></entry><entry><title type="html">IoT Encryption Failures and how to avoid them</title><link href="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them" rel="alternate" type="text/html" title="IoT Encryption Failures and how to avoid them" /><published>2019-08-28T12:00:00+00:00</published><updated>2019-08-28T12:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them">&lt;h1 id=&quot;iot-encryption-failures-and-how-to-avoid-them&quot;&gt;IoT encryption failures and how to avoid them&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The stories of misconfigured security systems leading to leaks of client data are common. Take for example the Equifax data breach back in 2017. The vulnerability was detected with a great delay due to expired certificates. According to &lt;a href=&quot;https://www.venafi.com/blog/7-data-breaches-caused-human-error-did-encryption-play-role&quot;&gt;Venafi&lt;/a&gt; &lt;em&gt;The device inspecting encrypted traffic was misconfigured because of a digital certificate that had expired ten months earlier. This along with other oversights enabled a digital attacker to crack into Equifax’s system in mid-May and maintain their access until the end of July&lt;/em&gt;. Another example of how certificates can have a massive impact is the case of &lt;a href=&quot;https://www.zdnet.com/article/ericsson-expired-certificate-caused-o2-and-softbank-outages/&quot;&gt;Ericsson&lt;/a&gt;. An expired certificate of the Swedish Telecommunications Company caused a major outage in 11 countries in December 2018 with over 32 million users affected by it.&lt;/p&gt;

&lt;p&gt;The reality of the situation for IoT or any stack, is that there is no single solution, button or line of code to protect it in its whole. Devices use different platforms, servers, connectivity domains, and protocols. There is potential for failure which can lead to serious data-breaching issues. In the case of encryption, developers may be unwittingly more susceptible or prone to error than they realize.&lt;/p&gt;

&lt;h2 id=&quot;iot-encryption-failures&quot;&gt;IoT Encryption Failures&lt;/h2&gt;

&lt;p&gt;The problem with devices and networks does not always lie in not having encryption but in the way encryption is applied. Following security guidelines is a good step but like many security systems, the devil is in the details and being overzealous is a good thing in this case. Let’s take a closer look:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Misconfigured IoT encryption&lt;/strong&gt;. The added layers and the diversity of protocols in IoT create additional failure points where encryption can be incorrectly implemented (e.g. sensor to IoT device via SCADA &amp;gt; IoT device to IoT gateway via LPWAN &amp;gt; IoT gateway to MQTT broker via TCP/IP). A single hole caused by a configuration mistake on the platform, on the network, on the cloud or on the device may compromise the entire tech stack. A slight mistake could have tremendous consequences and land your company some unsavoury headlines in the press.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regulatory compliance alone does not protect devices&lt;/strong&gt;. Never assume that implementing a basic set of guidelines is enough. In fact, it is merely the beginning. Regulatory compliance for the sake of abiding to a set of standard rules is not security. What should be done is use those rules as a base and enhance them with IoT specific security solutions that suit your deployment. This way, security and IoT encryption are maximised on all layers and at all points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not keeping track of machine identity protection&lt;/strong&gt;. Consider the scale of managing a fleet of thousands of devices (millions are possible, but let’s not break our minds). Managing SSL/TLS certificates at IoT scale is a daunting task, particularly if you issue the certificates manually (which is why most fail to use it altogether). Imagine the workload and the time wasted on a process which could and should be automated. TLS protocols grant secure communication over a network (assuming properly implemented). Security best practice dictates that certificates should have a lifespan of a days or hours to mitigate the impact of a leak. This is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;automating TLS certificate and key-issuing&lt;/a&gt; comes handy. By automating the certificate-issuing process, we reduce the burden that developers would face and eliminate human error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Key Management&lt;/strong&gt;. Encryption keys are like passwords. Storing your keys on disk is not ideal.The only way to efficiently handle this situation is to have a Trusted Platform Module (TPM). TPM is a cryptographic Module which enhances computer security and boosts privacy. It is designed to ward off software compromising. Unfortunately this is still relatively rare outside of high-compliance devices largely due to the added complexity and added hardware components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using weak, vulnerable, unknown or untested cryptographic algorithms&lt;/strong&gt;. Encryption is performed based on ciphers, complex algorithms and best developed by mathematical sophisticates. Some companies or developers choose to build and use their own encryption algorithms. This is a risky practice, particularly if it is not updated or reviewed for a prolonged period. Moreover, encryption protocols should undergo rigorous peer review and audit as is done in &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;open source&lt;/a&gt; security tools. It is better and more secure to use the already-tested and secure algorithms which are available out there. Some of the most popular encryption algorithms are: RSA, Advanced Encryption Standard (AES) and ECDSA. These are updated and they evolve so that they can help fend off cyber-attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relying solely on cloud providers for securing your data&lt;/strong&gt;. Securing data on the cloud and opting for a trustworthy provider is essential yet, this is only one piece of the security puzzle. Admittedly, cloud providers are all doing a good job towards securing the data we all store in the cloud. This, however, does not mean that a data leak is not possible. The cloud only covers one area of your architecture and even on the cloud, there are settings that must be configured correctly by the customer. Do you really believe that a 3rd party service, even AWS is taking full responsibility for your entire stack? Will it matter when -your- client data is leaked? IoT encryption is not only about securing a certain layer or point in the architecture. It needs to be holistic and cover database to customer data, to identity and access management, and of course, down to the IoT device itself. In cases of organisations and enterprises, this is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;DevSecOps&lt;/a&gt; can be of great help.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The complexity of the IoT ecosystem and the uniqueness of every deployment creates many potential IoT encryption failures and security failures in general. These mistakes are avoided only with the provision of easy-to-integrate IoT security solutions. We at &lt;a href=&quot;https://wott.io/&quot;&gt;Wott&lt;/a&gt; offer tools for developers to help harden the security of IoT devices and to fix vulnerabilities during the development process. We offer a seamless and easy-to-use solution which is open source, cloud-agnostic and integrates easily with most  common hardware and operating system providers so that your IoT infrastructure remains secure.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="open-source" /><summary type="html">IoT encryption failures and how to avoid them</summary></entry><entry><title type="html">The Future of IoT</title><link href="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot" rel="alternate" type="text/html" title="The Future of IoT" /><published>2019-08-16T13:00:00+00:00</published><updated>2019-08-16T13:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot">&lt;h1 id=&quot;the-future-of-iot&quot;&gt;The Future of IoT&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Future of IoT is both fascinating and challenging. As the number of connected devices is expected to triple by 2025, there are many significant questions and issues rising. Such as what does this mean for the Industry? What implications does this create?&lt;/p&gt;

&lt;p&gt;To start with, security is the primary concern. Smarter devices does not imply that security is smart too. On the contrary, the larger the number of distinct, non-interoperable devices connected, the larger the risk of a security breach - especially when security sits on the user’s network alone. In the era of Industry 4.0, as IoT expands into every aspect of our lives, managing the risk presented by these edge devices is a daunting task.&lt;/p&gt;

&lt;p&gt;But let us take a closer look at what the future of IoT will bring about, its aspiring achievements and significant challenges.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-and-the-different-industries-achievements-and-challenges&quot;&gt;The Future of IoT and the different Industries: Achievements and Challenges&lt;/h2&gt;

&lt;h3 id=&quot;smart-transport&quot;&gt;Smart Transport&lt;/h3&gt;
&lt;p&gt;The Future of IoT is all about connected airports, seaports, train stations and roads, which will allow for seamless movement of goods and jetsetters alike. Freight will be shipped across countries and borders with more efficiency and greater visibility.&lt;/p&gt;

&lt;p&gt;This means that high-quality infrastructure and updated systems will keep all devices, vehicles and terminals continuously connected and informed about the latest data and conditions. This also means that the amount of data transmitted and received will be monumental.&lt;/p&gt;

&lt;p&gt;Now imagine a minor flaw in the infrastructure, a hiccup in security and you can understand the massive impact it might have on business continuity and more importantly on human life. The existence of the ‘future of IoT’ depends on data security being ongoing industry goal.&lt;/p&gt;

&lt;p&gt;But how can you make sure that security is not breached and important data is not stolen? We believe that in the future of IoT, security-by-design is the only solution. The only way to safely guarantee the secure transmission of mission critical data, across devices, networks and systems is to implement security into every endpoint. Security by obfuscation was a good option and worked well for more isolated systems. But widely used systems (like those deployed on the billions of edge devices, obviously) are too easy for hackers to access, understand and compromise. Security for IoT must work even if a hacker can compromise a device.&lt;/p&gt;

&lt;h3 id=&quot;smart-homes-smart-living-smart-mobility&quot;&gt;Smart Homes, Smart Living, Smart Mobility&lt;/h3&gt;
&lt;p&gt;Smart home devices will create an autonomous ecosystem of efficiency, sustainability and smarter solutions. Imagine a world where your Volkswagen can actually talk to your thermostat and let it know when to turn on the A/C. The vehicle itself will come with built-in, real-time data collectors, available to make decisions and choose what is best for the user.&lt;/p&gt;

&lt;p&gt;In the future of IoT, autonomous devices will have agency - they will be able to make decisions for the user and provide the best customised experience. But if your car is making decisions for you, should the software not be well-maintained and up to date? Should you not feel completely comfortable with it making all of your decisions? Updates and maintenance of software should be automated and regular.  Users can easily forget or ignore reminders to update devices. The future of IoT calls for a seamless solution that will guarantee the maintenance, updates and &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;security&lt;/a&gt; of IoT devices without burdening the end user.&lt;/p&gt;

&lt;h3 id=&quot;industrial-iot&quot;&gt;Industrial IoT&lt;/h3&gt;
&lt;p&gt;The integration of IoT into industrial processes opens up new levels of efficiency. This is where IoT can be most disruptive as enterprise employees with the word ‘digital’ or ‘innovation’ in their titles leverage their MBAs to prepare powerpoint presentations that will transform and propel business into the future. (I can’t help teasing the corporates sometimes.) In the coming years, even the most traditional of brands and companies will turn to IoT to upscale both their services and their profits.  According to &lt;a href=&quot;https://www.accenture.com/t20150523t023633z__w__/us-en/_acnmedia/accenture/conversion-assets/dotcom/documents/global/pdf/dualpub_11/accenture-driving-unconventional-growth-through-iiot.pdfla=en&quot;&gt;Accenture&lt;/a&gt; the IIoT market will reach $500 billion by 2020.&lt;/p&gt;

&lt;p&gt;Imagine then that a tiny misconfiguration in the tech stack or the cloud could have dramatic consequence to business continuity (just as Maersk). For us at WoTT, the future of IoT is all about foreseeing these pitfalls and preventing them. One of the most successful ways to reduce mistakes in security and software is by including developers in the design process. Developers should be present from the beginning and should play a significant role in the design of the IoT deployment.  Involving &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;developers&lt;/a&gt; in the process will only secure the development even further and will save the industry a lot of money as the repairs after launching will be fewer and less costly.&lt;/p&gt;

&lt;h3 id=&quot;iot-and-healthcare&quot;&gt;IoT and Healthcare&lt;/h3&gt;
&lt;p&gt;From heart monitors to telemedicine and robotic surgery, edge devices can transform an industry that is stretched desperately thin. Remote health monitoring is a great solution delivering the best of science and technology to the remotest of places and even provide preventative care.&lt;/p&gt;

&lt;p&gt;With this in mind, how can we make sure that our valuable Healthcare related data is not compromised? For one, (you guessed it) security should be at the core of any device. It cannot be on the network alone, it must include the device itself and have multiple layers to prevent compromise.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-as-we-see-it&quot;&gt;The Future of IoT as we see it&lt;/h2&gt;

&lt;p&gt;In the Future of IoT, privacy and security are fundamental parameters. One way to cope is to create open source solutions - a robust ecosystem of developer tools for &lt;a href=&quot;https://www.memfault.com&quot;&gt;bug fixes&lt;/a&gt;, remote management and security. Crowdsourcing knowledge and allowing more individuals to contribute to the security of the ecosystem and as we see it, a prerequisite to the future of IoT.  &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Open source&lt;/a&gt; will pave the way to success with a common set of best practices and guidelines to foster interoperability - a key requirement for keeping up with the scale of managing connectivity at the edge.&lt;/p&gt;

&lt;p&gt;We at &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; envision the Future of IoT is full of &lt;a href=&quot;https://wott.io/blog/news/2019/06/20/why-we-are-doing-what-we-do&quot;&gt;neat use cases&lt;/a&gt; powered by trusted devices, fully-integrated and supported by a crowdsourced network of contributors where our solutions marvel at helping you make the most of IoT.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="open-source" /><summary type="html">The Future of IoT</summary></entry></feed>